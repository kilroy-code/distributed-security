function e({target:e=self,receiver:r=e,namespace:t=r,origin:n=e!==r&&e.location.origin,dispatcherLabel:s=t.name||r.name||r.location?.href||r,targetLabel:a=e.name||n||e.location?.href||e,log:o=null,info:i=console.info.bind(console),warn:c=console.warn.bind(console),error:l=console.error.bind(console)}){const g={},d="2.0",m=e.postMessage.bind(e),p=n?e=>m(e,n):m;let u=0;return r.addEventListener("message",(async function(r){o?.(s,"got message",r.data,"from",a,r.origin);let{id:i,method:m,params:u=[],result:f,error:y,jsonrpc:h}=r.data||{};if(r.source&&r.source!==e)return l?.(s,"to",a,"got message from",r.source);if(n&&n!==r.origin)return l?.(s,n,"mismatched origin",a,r.origin);if(h!==d)return c?.(`${s} ignoring non-jsonrpc message ${JSON.stringify(r.data)}.`);if(m){let e,r=null,n=Array.isArray(u)?u:[u];try{e=await t[m](...n)}catch(e){r=function(e){let{name:r,message:t,code:n,data:s}=e;return{name:r,message:t,code:n,data:s}}(e),t[m]||r.message.includes(m)?r.message||(r.message=`${r.name||r.toString()} in ${m}.`):(r.message=`${m} is not defined.`,r.code=-32601)}if(void 0===i)return;let c=r?{id:i,error:r,jsonrpc:d}:{id:i,result:e,jsonrpc:d};return o?.(s,"answering",i,r||e,"to",a),p(c)}let v=g[i];if(delete g[i],!v)return c?.(`${s} ignoring response ${r.data}.`);y?v.reject(y):v.resolve(f)})),i?.(`${s} will dispatch to ${a}`),function(e,...r){let t=++u,n=g[t]={};return new Promise(((i,c)=>{o?.(s,"request",t,e,r,"to",a),Object.assign(n,{resolve:i,reject:c}),p({id:t,method:e,params:r,jsonrpc:d})}))}}navigator.storage.persist().then((e=>console.log(`Device keys ${e?"will not":"may"} be cleared without explicit user action.`))),onmessage=r=>{onmessage=null;const t=r.data,n="vault!"+t,s="entry!"+t,a={sign:(e,...r)=>g("sign",e,...r),verify:(e,...r)=>g("verify",e,...r),encrypt:(e,...r)=>g("encrypt",e,...r),decrypt:(e,...r)=>g("decrypt",e,...r),create:(...e)=>g("create",...e),changeMembership:e=>g("changeMembership",e),destroy:e=>g("destroy",e),clear:e=>g("clear",e),wipeDeviceKeys:()=>g("wipeDeviceKeys")},o=e({target:r.ports[0],targetLabel:s,dispatcherLabel:n,namespace:a}),i=import.meta.url,c=new URL("worker-bundle.mjs",i),l="worker!"+t,g=e({target:new Worker(c,{type:"module",name:l}),targetLabel:l,dispatcherLabel:n,namespace:{store:(e,r,t)=>o("store",e,r,t),retrieve:(e,r)=>o("retrieve",e,r),getUserDeviceSecret:(e,r="")=>o("getUserDeviceSecret",e,r),ready(e){r.ports[0].start(),o("ready",e)}}})};
