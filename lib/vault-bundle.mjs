function transferrableError(error) { // An error object that we receive on our side might not be transferrable to the other.
  let {name, message} = error;
  return {name, message};
}

function dispatch({target,
       receiver = target,
       namespace = receiver,
       origin = ((target !== receiver) && target.location.origin),
       log = () => null,
       warn:logwarn = console.warn.bind(console),
       error:logerror = console.error.bind(console)
      }) {
  let requests = {},
      messageId = 0,
      jsonrpc = '2.0',
      targetLabel = origin || target,
      capturedPost = target.postMessage.bind(target), // In case (malicious) code later changes it.
      // window.postMessage and friends takes a targetOrigin that we should supply.
      // But other forms give error rather than ignoring the extra arg. So set the right form at initialization.
      post = origin ? message => capturedPost(message, origin) : capturedPost;
  log('dispatch to', targetLabel);

  receiver.addEventListener('message', async event => {
    log('message', event.data, 'from', event.origin || targetLabel);
    let {id, method, params = [], result, error, jsonrpc:version} = event.data || {};
    if (event.source && (event.source !== target)) return logerror('mismatched target:', target, event.source);
    if (origin && (origin !== event.origin)) return logerror('mismatched origin', origin, event.origin);
    if (version !== jsonrpc) return logwarn(`Ignoring non-jsonrpc message ${JSON.stringify(event.data)}.`);

    if (method) { // Incoming request or notification from target.
      let error = null, result,
    args = Array.isArray(params) ? params : [params]; // Accept either form of params.
      try { // method result might not be a promise, so we can't rely on .catch().
  result = await namespace[method](...args);
      } catch (e) {
  error = transferrableError(e);
  if (!namespace[method] && !error.message.includes(method))
    error.message = `${method} is not defined.`; // Be more helpful than some browsers.
  else if (!error.message) // It happens. E.g., operational errors from crypto.
    error.message = `${error.name || error.toString()} in ${method}.`;
      }
      let response = error ? {id, error, jsonrpc} : {id, result, jsonrpc};
      log('answering', id, error || result, 'to', targetLabel);
      return post(response);
    }

    let request = requests[id]; // A response from target to our earlier outgoing request.
    delete requests[id];
    if (!request) return console.log(`Ignoring response ${event.data}.`);
    if (error) request.reject(error);
    else request.resolve(result);
  });

  // FIXME: Don't leak promises when there is no response. Timeout? Return both request and notify? special arg? Some combination?
  return function request(method, ...params) {
    let id = ++messageId,
  request = requests[id] = {};
    return new Promise((resolve, reject) => {
      Object.assign(request, {resolve, reject});
      log('posting', id, method, params, 'to', targetLabel);
      post({id, method, params, jsonrpc});
    });
  };
}

// We don't just blindly forward messages in either direction. There is a specific set of operations.
const url = import.meta.url,

      api = { // jsonrpc requests from the client are handled by these, which answers them by making requests to the worker.
        sign(message, ...tags) { return postWorker('sign', message, ...tags); },
        verify(signature, ...tags) { return postWorker('verify', signature, ...tags); },
        encrypt(message, ...tags) { return postWorker('encrypt', message, ...tags); },
        decrypt(encrypted, ...tags) { return postWorker('decrypt', encrypted, ...tags); },
        create(...optionalMembers) { return postWorker('create', ...optionalMembers); },
        changeMembership(options) { return postWorker('changeMembership', options); },
        destroy(tagOrOptions) { return postWorker('destroy', tagOrOptions); },
        clear(tag) { return postWorker('clear', tag); }
      },

      hostAPI = { // jsonrpc request from the worker are handled by thise, which answers them by make requests to the client.
        store(resourceTag, ownerTag, signature) {
          return postClient('store', resourceTag, ownerTag, signature);
        },
        retrieve(resourceTag, ownerTag) {
          return postClient('retrieve', resourceTag, ownerTag);
        },
        getUserDeviceSecret(...args) {
          return postClient('getUserDeviceSecret', ...args);
        },
        ready(label) {
          postClient('ready', label);
        }
      },

      // Sets up the jsonrpc  connection to the client (index.mjs).
      hostOrigin = document.referrer ? new URL(document.referrer).origin : '*',
      postClient = dispatch({
        dispatcherLabel: url,
        target: parent,
        targetLabel: 'entry',
        receiver: self,
        namespace: api,
        origin: hostOrigin
      }),

      // Sets up the jsonrpc connection to the worker.
      vaultOrigin = new URL('worker-bundle.mjs', url),
      worker = new Worker(vaultOrigin, {type: 'module'}),
      postWorker = dispatch({
        dispatcherLabel: url,
        target: worker,
        targetLabel: 'worker',
        namespace: hostAPI
      });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmF1bHQtYnVuZGxlLm1qcyIsInNvdXJjZXMiOlsiLi4vbm9kZV9tb2R1bGVzL0BraWxyb3ktY29kZS9qc29ucnBjL2luZGV4Lm1qcyIsInZhdWx0Lm1qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcbmZ1bmN0aW9uIHRyYW5zZmVycmFibGVFcnJvcihlcnJvcikgeyAvLyBBbiBlcnJvciBvYmplY3QgdGhhdCB3ZSByZWNlaXZlIG9uIG91ciBzaWRlIG1pZ2h0IG5vdCBiZSB0cmFuc2ZlcnJhYmxlIHRvIHRoZSBvdGhlci5cbiAgbGV0IHtuYW1lLCBtZXNzYWdlfSA9IGVycm9yO1xuICByZXR1cm4ge25hbWUsIG1lc3NhZ2V9O1xufVxuXG5mdW5jdGlvbiBkaXNwYXRjaCh7dGFyZ2V0LFxuICAgICAgIHJlY2VpdmVyID0gdGFyZ2V0LFxuICAgICAgIG5hbWVzcGFjZSA9IHJlY2VpdmVyLFxuICAgICAgIG9yaWdpbiA9ICgodGFyZ2V0ICE9PSByZWNlaXZlcikgJiYgdGFyZ2V0LmxvY2F0aW9uLm9yaWdpbiksXG4gICAgICAgbG9nID0gKCkgPT4gbnVsbCxcbiAgICAgICB3YXJuOmxvZ3dhcm4gPSBjb25zb2xlLndhcm4uYmluZChjb25zb2xlKSxcbiAgICAgICBlcnJvcjpsb2dlcnJvciA9IGNvbnNvbGUuZXJyb3IuYmluZChjb25zb2xlKVxuICAgICAgfSkge1xuICBsZXQgcmVxdWVzdHMgPSB7fSxcbiAgICAgIG1lc3NhZ2VJZCA9IDAsXG4gICAgICBqc29ucnBjID0gJzIuMCcsXG4gICAgICB0YXJnZXRMYWJlbCA9IG9yaWdpbiB8fCB0YXJnZXQsXG4gICAgICBjYXB0dXJlZFBvc3QgPSB0YXJnZXQucG9zdE1lc3NhZ2UuYmluZCh0YXJnZXQpLCAvLyBJbiBjYXNlIChtYWxpY2lvdXMpIGNvZGUgbGF0ZXIgY2hhbmdlcyBpdC5cbiAgICAgIC8vIHdpbmRvdy5wb3N0TWVzc2FnZSBhbmQgZnJpZW5kcyB0YWtlcyBhIHRhcmdldE9yaWdpbiB0aGF0IHdlIHNob3VsZCBzdXBwbHkuXG4gICAgICAvLyBCdXQgb3RoZXIgZm9ybXMgZ2l2ZSBlcnJvciByYXRoZXIgdGhhbiBpZ25vcmluZyB0aGUgZXh0cmEgYXJnLiBTbyBzZXQgdGhlIHJpZ2h0IGZvcm0gYXQgaW5pdGlhbGl6YXRpb24uXG4gICAgICBwb3N0ID0gb3JpZ2luID8gbWVzc2FnZSA9PiBjYXB0dXJlZFBvc3QobWVzc2FnZSwgb3JpZ2luKSA6IGNhcHR1cmVkUG9zdDtcbiAgbG9nKCdkaXNwYXRjaCB0bycsIHRhcmdldExhYmVsKTtcblxuICByZWNlaXZlci5hZGRFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgYXN5bmMgZXZlbnQgPT4ge1xuICAgIGxvZygnbWVzc2FnZScsIGV2ZW50LmRhdGEsICdmcm9tJywgZXZlbnQub3JpZ2luIHx8IHRhcmdldExhYmVsKTtcbiAgICBsZXQge2lkLCBtZXRob2QsIHBhcmFtcyA9IFtdLCByZXN1bHQsIGVycm9yLCBqc29ucnBjOnZlcnNpb259ID0gZXZlbnQuZGF0YSB8fCB7fTtcbiAgICBpZiAoZXZlbnQuc291cmNlICYmIChldmVudC5zb3VyY2UgIT09IHRhcmdldCkpIHJldHVybiBsb2dlcnJvcignbWlzbWF0Y2hlZCB0YXJnZXQ6JywgdGFyZ2V0LCBldmVudC5zb3VyY2UpO1xuICAgIGlmIChvcmlnaW4gJiYgKG9yaWdpbiAhPT0gZXZlbnQub3JpZ2luKSkgcmV0dXJuIGxvZ2Vycm9yKCdtaXNtYXRjaGVkIG9yaWdpbicsIG9yaWdpbiwgZXZlbnQub3JpZ2luKTtcbiAgICBpZiAodmVyc2lvbiAhPT0ganNvbnJwYykgcmV0dXJuIGxvZ3dhcm4oYElnbm9yaW5nIG5vbi1qc29ucnBjIG1lc3NhZ2UgJHtKU09OLnN0cmluZ2lmeShldmVudC5kYXRhKX0uYCk7XG5cbiAgICBpZiAobWV0aG9kKSB7IC8vIEluY29taW5nIHJlcXVlc3Qgb3Igbm90aWZpY2F0aW9uIGZyb20gdGFyZ2V0LlxuICAgICAgbGV0IGVycm9yID0gbnVsbCwgcmVzdWx0LFxuICAgIGFyZ3MgPSBBcnJheS5pc0FycmF5KHBhcmFtcykgPyBwYXJhbXMgOiBbcGFyYW1zXTsgLy8gQWNjZXB0IGVpdGhlciBmb3JtIG9mIHBhcmFtcy5cbiAgICAgIHRyeSB7IC8vIG1ldGhvZCByZXN1bHQgbWlnaHQgbm90IGJlIGEgcHJvbWlzZSwgc28gd2UgY2FuJ3QgcmVseSBvbiAuY2F0Y2goKS5cbiAgcmVzdWx0ID0gYXdhaXQgbmFtZXNwYWNlW21ldGhvZF0oLi4uYXJncyk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gIGVycm9yID0gdHJhbnNmZXJyYWJsZUVycm9yKGUpO1xuICBpZiAoIW5hbWVzcGFjZVttZXRob2RdICYmICFlcnJvci5tZXNzYWdlLmluY2x1ZGVzKG1ldGhvZCkpXG4gICAgZXJyb3IubWVzc2FnZSA9IGAke21ldGhvZH0gaXMgbm90IGRlZmluZWQuYDsgLy8gQmUgbW9yZSBoZWxwZnVsIHRoYW4gc29tZSBicm93c2Vycy5cbiAgZWxzZSBpZiAoIWVycm9yLm1lc3NhZ2UpIC8vIEl0IGhhcHBlbnMuIEUuZy4sIG9wZXJhdGlvbmFsIGVycm9ycyBmcm9tIGNyeXB0by5cbiAgICBlcnJvci5tZXNzYWdlID0gYCR7ZXJyb3IubmFtZSB8fCBlcnJvci50b1N0cmluZygpfSBpbiAke21ldGhvZH0uYDtcbiAgICAgIH1cbiAgICAgIGxldCByZXNwb25zZSA9IGVycm9yID8ge2lkLCBlcnJvciwganNvbnJwY30gOiB7aWQsIHJlc3VsdCwganNvbnJwY307XG4gICAgICBsb2coJ2Fuc3dlcmluZycsIGlkLCBlcnJvciB8fCByZXN1bHQsICd0bycsIHRhcmdldExhYmVsKTtcbiAgICAgIHJldHVybiBwb3N0KHJlc3BvbnNlKTtcbiAgICB9XG5cbiAgICBsZXQgcmVxdWVzdCA9IHJlcXVlc3RzW2lkXTsgLy8gQSByZXNwb25zZSBmcm9tIHRhcmdldCB0byBvdXIgZWFybGllciBvdXRnb2luZyByZXF1ZXN0LlxuICAgIGRlbGV0ZSByZXF1ZXN0c1tpZF07XG4gICAgaWYgKCFyZXF1ZXN0KSByZXR1cm4gY29uc29sZS5sb2coYElnbm9yaW5nIHJlc3BvbnNlICR7ZXZlbnQuZGF0YX0uYCk7XG4gICAgaWYgKGVycm9yKSByZXF1ZXN0LnJlamVjdChlcnJvcik7XG4gICAgZWxzZSByZXF1ZXN0LnJlc29sdmUocmVzdWx0KTtcbiAgfSk7XG5cbiAgLy8gRklYTUU6IERvbid0IGxlYWsgcHJvbWlzZXMgd2hlbiB0aGVyZSBpcyBubyByZXNwb25zZS4gVGltZW91dD8gUmV0dXJuIGJvdGggcmVxdWVzdCBhbmQgbm90aWZ5PyBzcGVjaWFsIGFyZz8gU29tZSBjb21iaW5hdGlvbj9cbiAgcmV0dXJuIGZ1bmN0aW9uIHJlcXVlc3QobWV0aG9kLCAuLi5wYXJhbXMpIHtcbiAgICBsZXQgaWQgPSArK21lc3NhZ2VJZCxcbiAgcmVxdWVzdCA9IHJlcXVlc3RzW2lkXSA9IHt9O1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBPYmplY3QuYXNzaWduKHJlcXVlc3QsIHtyZXNvbHZlLCByZWplY3R9KTtcbiAgICAgIGxvZygncG9zdGluZycsIGlkLCBtZXRob2QsIHBhcmFtcywgJ3RvJywgdGFyZ2V0TGFiZWwpO1xuICAgICAgcG9zdCh7aWQsIG1ldGhvZCwgcGFyYW1zLCBqc29ucnBjfSk7XG4gICAgfSk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGRpc3BhdGNoO1xuIiwiaW1wb3J0IGRpc3BhdGNoIGZyb20gJ0BraWxyb3ktY29kZS9qc29ucnBjJztcblxuLy8gV2UgZG9uJ3QganVzdCBibGluZGx5IGZvcndhcmQgbWVzc2FnZXMgaW4gZWl0aGVyIGRpcmVjdGlvbi4gVGhlcmUgaXMgYSBzcGVjaWZpYyBzZXQgb2Ygb3BlcmF0aW9ucy5cbmNvbnN0IHVybCA9IGltcG9ydC5tZXRhLnVybCxcblxuICAgICAgYXBpID0geyAvLyBqc29ucnBjIHJlcXVlc3RzIGZyb20gdGhlIGNsaWVudCBhcmUgaGFuZGxlZCBieSB0aGVzZSwgd2hpY2ggYW5zd2VycyB0aGVtIGJ5IG1ha2luZyByZXF1ZXN0cyB0byB0aGUgd29ya2VyLlxuICAgICAgICBzaWduKG1lc3NhZ2UsIC4uLnRhZ3MpIHsgcmV0dXJuIHBvc3RXb3JrZXIoJ3NpZ24nLCBtZXNzYWdlLCAuLi50YWdzKTsgfSxcbiAgICAgICAgdmVyaWZ5KHNpZ25hdHVyZSwgLi4udGFncykgeyByZXR1cm4gcG9zdFdvcmtlcigndmVyaWZ5Jywgc2lnbmF0dXJlLCAuLi50YWdzKTsgfSxcbiAgICAgICAgZW5jcnlwdChtZXNzYWdlLCAuLi50YWdzKSB7IHJldHVybiBwb3N0V29ya2VyKCdlbmNyeXB0JywgbWVzc2FnZSwgLi4udGFncyk7IH0sXG4gICAgICAgIGRlY3J5cHQoZW5jcnlwdGVkLCAuLi50YWdzKSB7IHJldHVybiBwb3N0V29ya2VyKCdkZWNyeXB0JywgZW5jcnlwdGVkLCAuLi50YWdzKTsgfSxcbiAgICAgICAgY3JlYXRlKC4uLm9wdGlvbmFsTWVtYmVycykgeyByZXR1cm4gcG9zdFdvcmtlcignY3JlYXRlJywgLi4ub3B0aW9uYWxNZW1iZXJzKTsgfSxcbiAgICAgICAgY2hhbmdlTWVtYmVyc2hpcChvcHRpb25zKSB7IHJldHVybiBwb3N0V29ya2VyKCdjaGFuZ2VNZW1iZXJzaGlwJywgb3B0aW9ucyk7IH0sXG4gICAgICAgIGRlc3Ryb3kodGFnT3JPcHRpb25zKSB7IHJldHVybiBwb3N0V29ya2VyKCdkZXN0cm95JywgdGFnT3JPcHRpb25zKTsgfSxcbiAgICAgICAgY2xlYXIodGFnKSB7IHJldHVybiBwb3N0V29ya2VyKCdjbGVhcicsIHRhZyk7IH1cbiAgICAgIH0sXG5cbiAgICAgIGhvc3RBUEkgPSB7IC8vIGpzb25ycGMgcmVxdWVzdCBmcm9tIHRoZSB3b3JrZXIgYXJlIGhhbmRsZWQgYnkgdGhpc2UsIHdoaWNoIGFuc3dlcnMgdGhlbSBieSBtYWtlIHJlcXVlc3RzIHRvIHRoZSBjbGllbnQuXG4gICAgICAgIHN0b3JlKHJlc291cmNlVGFnLCBvd25lclRhZywgc2lnbmF0dXJlKSB7XG4gICAgICAgICAgcmV0dXJuIHBvc3RDbGllbnQoJ3N0b3JlJywgcmVzb3VyY2VUYWcsIG93bmVyVGFnLCBzaWduYXR1cmUpO1xuICAgICAgICB9LFxuICAgICAgICByZXRyaWV2ZShyZXNvdXJjZVRhZywgb3duZXJUYWcpIHtcbiAgICAgICAgICByZXR1cm4gcG9zdENsaWVudCgncmV0cmlldmUnLCByZXNvdXJjZVRhZywgb3duZXJUYWcpO1xuICAgICAgICB9LFxuICAgICAgICBnZXRVc2VyRGV2aWNlU2VjcmV0KC4uLmFyZ3MpIHtcbiAgICAgICAgICByZXR1cm4gcG9zdENsaWVudCgnZ2V0VXNlckRldmljZVNlY3JldCcsIC4uLmFyZ3MpO1xuICAgICAgICB9LFxuICAgICAgICByZWFkeShsYWJlbCkge1xuICAgICAgICAgIHBvc3RDbGllbnQoJ3JlYWR5JywgbGFiZWwpO1xuICAgICAgICB9XG4gICAgICB9LFxuXG4gICAgICAvLyBTZXRzIHVwIHRoZSBqc29ucnBjICBjb25uZWN0aW9uIHRvIHRoZSBjbGllbnQgKGluZGV4Lm1qcykuXG4gICAgICBob3N0T3JpZ2luID0gZG9jdW1lbnQucmVmZXJyZXIgPyBuZXcgVVJMKGRvY3VtZW50LnJlZmVycmVyKS5vcmlnaW4gOiAnKicsXG4gICAgICBwb3N0Q2xpZW50ID0gZGlzcGF0Y2goe1xuICAgICAgICBkaXNwYXRjaGVyTGFiZWw6IHVybCxcbiAgICAgICAgdGFyZ2V0OiBwYXJlbnQsXG4gICAgICAgIHRhcmdldExhYmVsOiAnZW50cnknLFxuICAgICAgICByZWNlaXZlcjogc2VsZixcbiAgICAgICAgbmFtZXNwYWNlOiBhcGksXG4gICAgICAgIG9yaWdpbjogaG9zdE9yaWdpblxuICAgICAgfSksXG5cbiAgICAgIC8vIFNldHMgdXAgdGhlIGpzb25ycGMgY29ubmVjdGlvbiB0byB0aGUgd29ya2VyLlxuICAgICAgdmF1bHRPcmlnaW4gPSBuZXcgVVJMKCd3b3JrZXItYnVuZGxlLm1qcycsIHVybCksXG4gICAgICB3b3JrZXIgPSBuZXcgV29ya2VyKHZhdWx0T3JpZ2luLCB7dHlwZTogJ21vZHVsZSd9KSxcbiAgICAgIHBvc3RXb3JrZXIgPSBkaXNwYXRjaCh7XG4gICAgICAgIGRpc3BhdGNoZXJMYWJlbDogdXJsLFxuICAgICAgICB0YXJnZXQ6IHdvcmtlcixcbiAgICAgICAgdGFyZ2V0TGFiZWw6ICd3b3JrZXInLFxuICAgICAgICBuYW1lc3BhY2U6IGhvc3RBUElcbiAgICAgIH0pO1xuXG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsU0FBUyxrQkFBa0IsQ0FBQyxLQUFLLEVBQUU7QUFDbkMsRUFBRSxJQUFJLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxHQUFHLEtBQUssQ0FBQztBQUM5QixFQUFFLE9BQU8sQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUM7QUFDekIsQ0FBQztBQUNEO0FBQ0EsU0FBUyxRQUFRLENBQUMsQ0FBQyxNQUFNO0FBQ3pCLE9BQU8sUUFBUSxHQUFHLE1BQU07QUFDeEIsT0FBTyxTQUFTLEdBQUcsUUFBUTtBQUMzQixPQUFPLE1BQU0sSUFBSSxDQUFDLE1BQU0sS0FBSyxRQUFRLEtBQUssTUFBTSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUM7QUFDakUsT0FBTyxHQUFHLEdBQUcsTUFBTSxJQUFJO0FBQ3ZCLE9BQU8sSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUM7QUFDaEQsT0FBTyxLQUFLLENBQUMsUUFBUSxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQztBQUNuRCxPQUFPLEVBQUU7QUFDVCxFQUFFLElBQUksUUFBUSxHQUFHLEVBQUU7QUFDbkIsTUFBTSxTQUFTLEdBQUcsQ0FBQztBQUNuQixNQUFNLE9BQU8sR0FBRyxLQUFLO0FBQ3JCLE1BQU0sV0FBVyxHQUFHLE1BQU0sSUFBSSxNQUFNO0FBQ3BDLE1BQU0sWUFBWSxHQUFHLE1BQU0sQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQztBQUNwRDtBQUNBO0FBQ0Es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
