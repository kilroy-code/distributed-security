const e=new URL(import.meta.url).origin,t=/(\S{50})(\S{2})(\S{2})(\S+)/;async function r(e){if(404===e.status)return"";if(!e.ok)return Promise.reject(e.statusText);let t=await e.text();return t?JSON.parse(t):t}const n={get origin(){return e},tagPath:function(e,r,n="json"){if(!r)return e;let o=r.match(t);if(!o)return`${e}/${r}`;let[a,i,s,c,d]=o;return`${e}/${i}/${s}/${c}/${d}.${n}`},mkdir:undefined,uri(t,r){return`${e}/db/${this.tagPath(t,r)}`},store(e,t,n,o={}){return fetch(this.uri(e,t),{method:"PUT",body:JSON.stringify(n),headers:{"Content-Type":"application/json",...o.headers||{}}}).then(r)},retrieve(e,t,n={}){return fetch(this.uri(e,t),{cache:"default",headers:{Accept:"application/json",...n.headers||{}}}).then(r)}};var o=e=>e;"undefined"!=typeof window&&(o=window.prompt);const a=new URL(import.meta.url),i=new URL("vault.html",a),s=document.createElement("iframe"),c=new MessageChannel,d=Object.assign({log(...e){console.log(...e)},getUserDeviceSecret:function(e,t){return t?e+o(t):e}},n),l=new Promise((e=>{d.ready=e,s.style.display="none",document.body.append(s),s.setAttribute("src",i),s.contentWindow.name="vault!"+a.href,c.port1.start(),s.onload=()=>s.contentWindow.postMessage("initializePort",i.origin,[c.port2])})),g=function({target:e=self,receiver:t=e,namespace:r=t,origin:n=e!==t&&e.location.origin,dispatcherLabel:o=r.name||t.name||t.location?.href||t,targetLabel:a=e.name||n||e.location?.href||e,log:i=null,info:s=console.info.bind(console),warn:c=console.warn.bind(console),error:d=console.error.bind(console)}){const l={},g="2.0",u=e.postMessage.bind(e),m=n?e=>u(e,n):u;let p=0;return t.addEventListener("message",(async function(t){i?.(o,"got message",t.data,"from",a,t.origin);let{id:s,method:u,params:p=[],result:f,error:h,jsonrpc:y}=t.data||{};if(t.source&&t.source!==e)return d?.(o,"to",a,"got message from",t.source);if(n&&n!==t.origin)return d?.(o,n,"mismatched origin",a,t.origin);if(y!==g)return c?.(`${o} ignoring non-jsonrpc message ${JSON.stringify(t.data)}.`);if(u){let e,t=null,n=Array.isArray(p)?p:[p];try{e=await r[u](...n)}catch(e){t=function(e){let{name:t,message:r,code:n,data:o}=e;return{name:t,message:r,code:n,data:o}}(e),r[u]||t.message.includes(u)?t.message||(t.message=`${t.name||t.toString()} in ${u}.`):(t.message=`${u} is not defined.`,t.code=-32601)}if(void 0===s)return;let c=t?{id:s,error:t,jsonrpc:g}:{id:s,result:e,jsonrpc:g};return i?.(o,"answering",s,t||e,"to",a),m(c)}let w=l[s];if(delete l[s],!w)return c?.(`${o} ignoring response ${t.data}.`);h?w.reject(h):w.resolve(f)})),s?.(`${o} will dispatch to ${a}`),function(e,...t){let r=++p,n=l[r]={};return new Promise(((s,c)=>{i?.(o,"request",r,e,t,"to",a),Object.assign(n,{resolve:s,reject:c}),m({id:r,method:e,params:t,jsonrpc:g})}))}}({dispatcherLabel:"entry!"+a.href,namespace:d,target:c.port1,targetLabel:s.contentWindow.name}),u={sign:(e,...t)=>g("sign",e,...t),verify:(e,...t)=>g("verify",e,...t),encrypt:(e,...t)=>g("encrypt",e,...t),decrypt:(e,...t)=>g("decrypt",e,...t),create:(...e)=>g("create",...e),changeMembership:({tag:e,add:t,remove:r}={})=>g("changeMembership",{tag:e,add:t,remove:r}),destroy:e=>g("destroy",e),clear:(e=null)=>g("clear",e),ready:l,get Storage(){return d},set Storage(e){Object.assign(d,e)},set getUserDeviceSecret(e){d.getUserDeviceSecret=e}};export{u as default};
