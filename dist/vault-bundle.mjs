function transferrableError(error) { // An error object that we receive on our side might not be transferrable to the other.
  let {name, message, code, data} = error;
  return {name, message, code, data};
}

// Set up bidirectional communcations with target, returning a function (methodName, ...params) that will send to target.
function dispatch({target = self,        // The window, worker, or other object to which we will postMessage.
		   receiver = target,    // The window, worker, or other object of which WE will handle 'message' events from target.
		   namespace = receiver, // An object that defines any methods that may be requested by target.

		   origin = ((target !== receiver) && target.location.origin),

		   dispatcherLabel = namespace.name || receiver.name || receiver.location?.href || receiver,
		   targetLabel = target.name || origin || target.location?.href || target,

		   log = null,
		   info:loginfo = console.info.bind(console),
		   warn:logwarn = console.warn.bind(console),
		   error:logerror = console.error.bind(console)
		  }) {
  const requests = {},
        jsonrpc = '2.0',
        capturedPost = target.postMessage.bind(target), // In case (malicious) code later changes it.
        // window.postMessage and friends takes a targetOrigin that we supply.
        // But worker.postMessage gives error rather than ignoring the extra arg. So set the right form at initialization.
        post = origin ? message => capturedPost(message, origin) : capturedPost;
  let messageId = 0; // pre-incremented id starts at 1.

  function request(method, ...params) { // Promise the result of method(...params) in target.
    // We do a target.postMessage of a jsonrpc request, and resolve the promise with the response, matched by id.
    // If the target happens to be set up by a dispatch like this one, it will respond with whatever it's
    // namespace[method](...params) resolves to. We only send jsonrpc requests (with an id), not notifications,
    // because there is no way to get errors back from a jsonrpc notification.
    let id = ++messageId,
	request = requests[id] = {};
    // It would be nice to not leak request objects if they aren't answered.
    return new Promise((resolve, reject) => {
      log?.(dispatcherLabel, 'request', id, method, params, 'to', targetLabel);
      Object.assign(request, {resolve, reject});
      post({id, method, params, jsonrpc});
    });
  }

  async function respond(event) { // Handle 'message' events that we receive from target.
    log?.(dispatcherLabel, 'got message', event.data, 'from', targetLabel, event.origin);
    let {id, method, params = [], result, error, jsonrpc:version} = event.data || {};

    // Noisily ignore messages that are not from the expect target or origin, or which are not jsonrpc.
    if (event.source && (event.source !== target)) return logerror?.(dispatcherLabel, 'to', targetLabel,  'got message from', event.source);
    if (origin && (origin !== event.origin)) return logerror?.(dispatcherLabel, origin, 'mismatched origin', targetLabel, event.origin);
    if (version !== jsonrpc) return logwarn?.(`${dispatcherLabel} ignoring non-jsonrpc message ${JSON.stringify(event.data)}.`);

    if (method) { // Incoming request or notification from target.
      let error = null, result,
          // jsonrpc request/notification can have positional args (array) or named args (a POJO).
	  args = Array.isArray(params) ? params : [params]; // Accept either.
      try { // method result might not be a promise, so we can't rely on .catch().
        result = await namespace[method](...args); // Call the method.
      } catch (e) { // Send back a clean {name, message} object.
        error = transferrableError(e);
        if (!namespace[method] && !error.message.includes(method)) {
	  error.message = `${method} is not defined.`; // Be more helpful than some browsers.
          error.code = -32601; // Defined by json-rpc spec.
        } else if (!error.message) // It happens. E.g., operational errors from crypto.
	  error.message = `${error.name || error.toString()} in ${method}.`;
      }
      if (id === undefined) return; // Don't respond to a 'notification'. null id is still sent back.
      let response = error ? {id, error, jsonrpc} : {id, result, jsonrpc};
      log?.(dispatcherLabel, 'answering', id, error || result, 'to', targetLabel);
      return post(response);
    }

    // Otherwise, it is a response from target to our earlier outgoing request.
    let request = requests[id];  // Resolve or reject the promise that an an earlier request created.
    delete requests[id];
    if (!request) return logwarn?.(`${dispatcherLabel} ignoring response ${event.data}.`);
    if (error) request.reject(error);
    else request.resolve(result);
  }

  // Now set up the handler and return the function for the caller to use to make requests.
  receiver.addEventListener("message", respond);
  loginfo?.(`${dispatcherLabel} will dispatch to ${targetLabel}`);
  return request;
}

// The vault is this code running in an iframe, which does nothing but communicate messages
// to the parent entry, and to a worker launched within the frame.

// We don't just blindly forward messages in either direction. There is a specific set of operations.

// Here is the jsonrpc connection back towards the client (index.mjs).
onmessage = event => {
  onmessage = null; // Once set, it cannot be reset.
  // For debugging, the parent names the frame "vault!cloudName", where cloudName is the url of ../index.mjs
  const cloudName = self.name.split('!')[1];
  console.log({labelledName: self.name, evenData: event.data, eventSourceLocation: event.source.location.href});

  const entryModuleName = 'entry!'+cloudName,
        api = { // jsonrpc requests from the client are handled by these, which answers them by making requests to the worker.
          sign(message, ...tags) { return postWorker('sign', message, ...tags); },
          verify(signature, ...tags) { return postWorker('verify', signature, ...tags); },
          encrypt(message, ...tags) { return postWorker('encrypt', message, ...tags); },
          decrypt(encrypted, ...tags) { return postWorker('decrypt', encrypted, ...tags); },
          create(...optionalMembers) { return postWorker('create', ...optionalMembers); },
          changeMembership(options) { return postWorker('changeMembership', options); },
          destroy(tagOrOptions) { return postWorker('destroy', tagOrOptions); },
          clear(tag) { return postWorker('clear', tag); }
        },
        postClient = dispatch({
          target: event.ports[0],
          targetLabel: entryModuleName,
          dispatcherLabel: self.name,
          namespace: api
        });

  // Here is the jsonrpc connection to the worker.
  const url = import.meta.url,
        vaultOrigin = new URL('worker-bundle.mjs', url),
        workerName = 'worker!'+cloudName,
        worker = new Worker(vaultOrigin, {type: 'module', name: workerName}),
        hostAPI = { // jsonrpc request from the worker are handled by these, which answers them by make requests to the client.
          store(resourceTag, ownerTag, signature) {
            return postClient('store', resourceTag, ownerTag, signature);
          },
          retrieve(resourceTag, ownerTag) {
            return postClient('retrieve', resourceTag, ownerTag);
          },
          getUserDeviceSecret(tag, prompt = '') {
            return postClient('getUserDeviceSecret', tag, prompt);
          },
          ready(label) {
            event.ports[0].start();
            postClient('ready', label);
          }
        },
        postWorker = dispatch({
          target: worker,
          targetLabel: workerName,
          dispatcherLabel: self.name,
          namespace: hostAPI
        });
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
