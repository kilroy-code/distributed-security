const Storage = {
  async store(resourceTag, ownerTag, signature) {
    let verified = await this.Security.verify(signature, {team: ownerTag, notBefore: 'team'});
    if (!verified) throw new Error(`Signature ${signature} does not match owner of ${ownerTag}.`);
    if (verified.payload.length) {
      this[resourceTag][ownerTag] = signature;
    } else {
      delete this[resourceTag][ownerTag];
    }
    return null; // Must not return undefined for jsonrpc.
  },
  async retrieve(resourceTag, ownerTag) {
    // We do not verify and get the original data out here, because the caller has
    // the right to do so without trusting us.
    return this[resourceTag][ownerTag];
  },
  Team: {},
  KeyRecovery: {},
  EncryptionKey: {}
};

function transferrableError(error) { // An error object that we receive on our side might not be transferrable to the other.
  let {name, message} = error;
  return {name, message};
}

function dispatch({target,
       receiver = target,
       namespace = receiver,
       origin = ((target !== receiver) && target.location.origin),
       log = () => null,
       warn:logwarn = console.warn.bind(console),
       error:logerror = console.error.bind(console)
      }) {
  let requests = {},
      messageId = 0,
      jsonrpc = '2.0',
      targetLabel = origin || target,
      capturedPost = target.postMessage.bind(target), // In case (malicious) code later changes it.
      // window.postMessage and friends takes a targetOrigin that we should supply.
      // But other forms give error rather than ignoring the extra arg. So set the right form at initialization.
      post = origin ? message => capturedPost(message, origin) : capturedPost;
  log('dispatch to', targetLabel);

  receiver.addEventListener('message', async event => {
    log('message', event.data, 'from', event.origin || targetLabel);
    let {id, method, params = [], result, error, jsonrpc:version} = event.data || {};
    if (event.source && (event.source !== target)) return logerror('mismatched target:', target, event.source);
    if (origin && (origin !== event.origin)) return logerror('mismatched origin', origin, event.origin);
    if (version !== jsonrpc) return logwarn(`Ignoring non-jsonrpc message ${JSON.stringify(event.data)}.`);

    if (method) { // Incoming request or notification from target.
      let error = null, result,
    args = Array.isArray(params) ? params : [params]; // Accept either form of params.
      try { // method result might not be a promise, so we can't rely on .catch().
  result = await namespace[method](...args);
      } catch (e) {
  error = transferrableError(e);
  if (!namespace[method] && !error.message.includes(method))
    error.message = `${method} is not defined.`; // Be more helpful than some browsers.
  else if (!error.message) // It happens. E.g., operational errors from crypto.
    error.message = `${error.name || error.toString()} in ${method}.`;
      }
      let response = error ? {id, error, jsonrpc} : {id, result, jsonrpc};
      log('answering', id, error || result, 'to', targetLabel);
      return post(response);
    }

    let request = requests[id]; // A response from target to our earlier outgoing request.
    delete requests[id];
    if (!request) return console.log(`Ignoring response ${event.data}.`);
    if (error) request.reject(error);
    else request.resolve(result);
  });

  // FIXME: Don't leak promises when there is no response. Timeout? Return both request and notify? special arg? Some combination?
  return function request(method, ...params) {
    let id = ++messageId,
  request = requests[id] = {};
    return new Promise((resolve, reject) => {
      Object.assign(request, {resolve, reject});
      log('posting', id, method, params, 'to', targetLabel);
      post({id, method, params, jsonrpc});
    });
  };
}

const url = import.meta.url,
      vaultUrl = new URL('lib/vault-bundle.mjs', url),
      iframe = document.createElement('iframe'),
      resourcesForIframe = { // What the vault can postMessage to us.
        log(...args) { console.log(...args); }
        // Will also get store & retrieve, and getUserDeviceSecret, provided by the application,
        // and a promise resolver set by us that the vault will use to indicate that it is ready.
      },
      api = {
        sign(message, ...tags) { return postIframe('sign', message, ...tags); },
        verify(signature, ...tags) { return postIframe('verify', signature, ...tags); },
        encrypt(message, ...tags) { return postIframe('encrypt', message, ...tags); },
        decrypt(encrypted, ...tags) { return postIframe('decrypt', encrypted, ...tags); },
        create(...optionalMembers) { return postIframe('create', ...optionalMembers); },
        changeMembership({tag, add, remove} = {}) { return postIframe('changeMembership', {tag, add, remove}); },
        destroy(tagOrOptions) { return postIframe('destroy', tagOrOptions); },
        clear(tag = null) { return postIframe('clear', tag); },

        // Application assigns these so that they can be used by the vault.
        set Storage(storage) { Object.assign(resourcesForIframe, storage); },
        set getUserDeviceSecret(thunk) { resourcesForIframe.getUserDeviceSecret = thunk; },

        // Ready doesn't resolve until the vault posts to us that it is ready.
        ready: new Promise(resolve => {
          resourcesForIframe.ready = resolve;
          iframe.style.display = 'none';
          document.body.append(iframe); // Before referencing its contentWindow.
          iframe.setAttribute('srcdoc', `<!DOCTYPE html><html><body><script type="module" src="${vaultUrl.href}"></script></body></html>`);
        })
      },

      // postMessage to the vault, promising the response.
      postIframe = dispatch({
        dispatcherLabel: url,
        target: iframe.contentWindow,
        targetLabel: 'vault',
        receiver: self,
        origin: vaultUrl.origin,
        namespace: resourcesForIframe});

const scale = 10 * 1024 * 1024;
function makeMessage(length = scale) {
  return Array.from({length}, (_, index) => index & 1).join('');
}
const base64withDot = /^[A-Za-z0-9_\-.]+$/;
function isBase64URL(string, regex = base64withDot) {
  expect(regex.test(string)).toBeTruthy();
}

function sameTypedArray(result, message) {
  // The payload is a Uint8Array, but in NodeJS, it will be a subclass of Uint8Array,
  // which won't compare the same in Jasmine toEqual.
  expect(new Uint8Array(result.payload)).toEqual(message);
}

function testKrypto (krypto, // Pass either Krypto or MultiKrypto
                                    encryptableSize = 446) {
  const bigEncryptable = encryptableSize > 1000,
        slowKeyCreation = 10e3,
        slowHybrid = bigEncryptable ? slowKeyCreation : 5e3, // Needed on Android
        message = makeMessage();

  describe('signing', function () {
    let keypair;
    beforeAll(async function () {
      keypair = await krypto.generateSigningKey();
    });
    it('with a private key produces a base64URL signature that verifies with the public key.', async function () {
      let signature = await krypto.sign(keypair.privateKey, message);
      isBase64URL(signature);
      expect(await krypto.verify(keypair.publicKey, signature)).toBeTruthy();
    });
    it('returns undefined for verify with the wrong key.', async function () {
      let signature = await krypto.sign(keypair.privateKey, message),
          wrongKeypair = await krypto.generateSigningKey();
      expect(await krypto.verify(wrongKeypair.publicKey, signature)).toBeUndefined();
    });
    it('handles binary, and verifies with that as payload property.', async function () {
      let message = new Uint8Array([21, 31]),
          signature = await krypto.sign(keypair.privateKey, message),
          verified = await krypto.verify(keypair.publicKey, signature);
      expect(verified.cty).toBeUndefined();
      sameTypedArray(verified, message);
    });
    it('handles text, setting cty as "text/plain", and verifies with that as the text property and an encoding of that for payload.', async function () {
      let signature = await krypto.sign(keypair.privateKey, message),
          verified = await krypto.verify(keypair.publicKey, signature);
      expect(verified.protectedHeader.cty).toBe('text/plain');
      expect(verified.text).toBe(message);
      expect(verified.payload).toEqual(new TextEncoder().encode(message));
    });
    it('handles json, setting cty as "json", and verifies with that as json property, the string of that as the text property, and the encoding of that string for payload.', async function () {
      let message = {foo: 'bar'},
          signature = await krypto.sign(keypair.privateKey, message),
          verified = await krypto.verify(keypair.publicKey, signature);
      expect(verified.protectedHeader.cty).toBe('json');
      expect(verified.json).toEqual(message);
      expect(verified.text).toBe(JSON.stringify(message));
      expect(verified.payload).toEqual(new TextEncoder().encode(JSON.stringify(message)));
    });
    it('Uses specified headers if supplied, including cty.', async function () {
      let cty = 'text/html',
          iat = Date.now(),
          foo = 17,
          message = "<something else>",
          signature = await krypto.sign(keypair.privateKey, message, {cty, iat, foo}),
          verified = await krypto.verify(keypair.publicKey, signature);
      expect(verified.protectedHeader.cty).toBe(cty);
      expect(verified.protectedHeader.iat).toBe(iat);
      expect(verified.protectedHeader.foo).toBe(foo);
      expect(verified.text).toEqual(message);
    });
  });

  describe('encryption', function () {
    let keypair;
    beforeAll(async function () {
      keypair = await krypto.generateEncryptingKey();
    });
    it(`can work up through at least ${encryptableSize} bytes with an asymmetric keypair.`, async function () {
      // Public key encrypt will work up through 446 bytes, but the result will not decrypt.
      let message = makeMessage(encryptableSize),
          encrypted = await krypto.encrypt(keypair.publicKey, message),
          decrypted = await krypto.decrypt(keypair.privateKey, encrypted);
      isBase64URL(encrypted);
      expect(decrypted.text).toBe(message);
    }, slowHybrid);
    function testSymmetric(label, promise, decryptPromise = promise) {
      it(`can work on much larger data with a ${label}.`, async function () {
        let key = await promise,
            decryptKey = await decryptPromise,
            encrypted = await krypto.encrypt(key, message),
            decrypted = await krypto.decrypt(decryptKey, encrypted);
        isBase64URL(encrypted);
        expect(decrypted.text).toBe(message);
      });
    }
    testSymmetric('fixed symmetric key',
                  krypto.generateSymmetricKey());
    testSymmetric('reproducible secret',
                  krypto.generateSymmetricKey("secret"),
                  krypto.generateSymmetricKey("secret"));

    it('handles binary, and decrypts as same.', async function () {
      let message = new Uint8Array([21, 31]),
          encrypted = await krypto.encrypt(keypair.publicKey, message),
          decrypted = await krypto.decrypt(keypair.privateKey, encrypted),
          header = krypto.decodeProtectedHeader(encrypted);
      expect(header.cty).toBeUndefined();
      sameTypedArray(decrypted, message);
    });
    it('handles text, and decrypts as same.', async function () {
      let encrypted = await krypto.encrypt(keypair.publicKey, message),
          decrypted = await krypto.decrypt(keypair.privateKey, encrypted),
          header = krypto.decodeProtectedHeader(encrypted);
      expect(header.cty).toBe('text/plain');
      expect(decrypted.text).toBe(message);
    });
    it('handles json, and decrypts as same.', async function () {
      let message = {foo: 'bar'},
          encrypted = await krypto.encrypt(keypair.publicKey, message);
      let header = krypto.decodeProtectedHeader(encrypted),
          decrypted = await krypto.decrypt(keypair.privateKey, encrypted);
      expect(header.cty).toBe('json');
      expect(decrypted.json).toEqual(message);
    });
    it('Uses specified headers if supplied, including cty.', async function () {
      let cty = 'text/html',
          iat = Date.now(),
          foo = 17,
          message = "<something else>",
          encrypted = await krypto.encrypt(keypair.publicKey, message, {cty, iat, foo}),
          decrypted = await krypto.decrypt(keypair.privateKey, encrypted),
          header = krypto.decodeProtectedHeader(encrypted);
      expect(header.cty).toBe(cty);
      expect(header.iat).toBe(iat);
      expect(header.foo).toBe(foo);
      expect(decrypted.text).toBe(message);
    });
    
    function failsWithWrong(label, keysThunk) {
      it(`rejects wrong ${label}.`, async function() {
        let [encryptKey, decryptKey] = await keysThunk(),
            message = makeMessage(encryptableSize),
            encrypted = await krypto.encrypt(encryptKey, message);
        await expectAsync(krypto.decrypt(decryptKey, encrypted)).toBeRejected();
      }, slowKeyCreation);
    }
    failsWithWrong('asymmetric key', async () => [
      (await krypto.generateEncryptingKey()).publicKey,
      (await krypto.generateEncryptingKey()).privateKey
    ]);
    failsWithWrong('symmetric key', async () => [
      await krypto.generateSymmetricKey(),
      await krypto.generateSymmetricKey()
    ]);
    failsWithWrong('secret', async () => [
      await krypto.generateSymmetricKey("secret"),
      await krypto.generateSymmetricKey("secretX")
    ]);
  });

  describe('export/import', function () {
    // Handy for cycling in a size-checkable way.
    async function exportKey(key) {
      return JSON.stringify(await krypto.exportJWK(key));
    }
    function importKey(string) {
      return krypto.importJWK(JSON.parse(string));
    }

    describe(`of signing keys`, function () {
      const privateSigningSize = 253; // 248 raw
      it(`works with the private signing key as a ${privateSigningSize} byte serialization.`, async function () {
        let keypair = await krypto.generateSigningKey(),
            serializedPrivateKey = await exportKey(keypair.privateKey),
            importedPrivateKey = await importKey(serializedPrivateKey),
            signature = await krypto.sign(importedPrivateKey, message);
        expect(serializedPrivateKey.length).toBe(privateSigningSize);
        expect(await krypto.verify(keypair.publicKey, signature)).toBeTruthy();
      });
      const publicSigningSize = 182; // 132 raw
      it(`works with the public verifying key as a ${publicSigningSize} byte serialization.`, async function () {
        let keypair = await krypto.generateSigningKey(),
            serializedPublicKey = await exportKey(keypair.publicKey),
            importedPublicKey = await importKey(serializedPublicKey),
            signature = await krypto.sign(keypair.privateKey, message);
        expect(serializedPublicKey.length).toBe(publicSigningSize);
        expect(await krypto.verify(importedPublicKey, signature)).toBeTruthy();
      });

      const publicSigningRawSize = 132;
      it(`works with public key as a raw verifying key as a base64URL serialization of no more that ${publicSigningRawSize} bytes`, async function () {
        let keypair = await krypto.generateSigningKey(),
            serializedPublicKey = await krypto.exportRaw(keypair.publicKey),
            importedPublicKey = await krypto.importRaw(serializedPublicKey),
            signature = await krypto.sign(keypair.privateKey, message);
        isBase64URL(serializedPublicKey);
        expect(serializedPublicKey.length).toBeLessThanOrEqual(publicSigningRawSize);
        expect(await krypto.verify(importedPublicKey, signature)).toBeTruthy();
      });
    });

    describe('of encryption keys', function () {
      const privateEncryptingKeySize = [3169, 3173]; // raw [3164, 3168]; // with a 4k modulusSize key
      it(`works with the private key as a ${privateEncryptingKeySize[0]}-${privateEncryptingKeySize[1]} byte serialization.`, async function () {
        let keypair = await krypto.generateEncryptingKey(),
            serializedPrivateKey = await exportKey(keypair.privateKey),
            importedPrivateKey = await importKey(serializedPrivateKey),
            message = makeMessage(446),
            encrypted = await krypto.encrypt(keypair.publicKey, message),
            decrypted = await krypto.decrypt(importedPrivateKey, encrypted);
        expect(serializedPrivateKey.length).toBeGreaterThanOrEqual(privateEncryptingKeySize[0]);
        expect(serializedPrivateKey.length).toBeLessThanOrEqual(privateEncryptingKeySize[1]);
        expect(decrypted.text).toBe(message);
      });
      const publicEncryptingKeySize = 735; // raw 736; // with a 4k modulusSize key
      it(`works with the public key as a ${publicEncryptingKeySize} byte serialization.`, async function () {
        let keypair = await krypto.generateEncryptingKey(),
            serializedPublicKey = await exportKey(keypair.publicKey),
            importedPublicKey = await importKey(serializedPublicKey),
            message = makeMessage(446),
            encrypted = await krypto.encrypt(importedPublicKey, message),
            decrypted = await krypto.decrypt(keypair.privateKey, encrypted);
        expect(serializedPublicKey.length).toBe(publicEncryptingKeySize);
        expect(decrypted.text).toBe(message);
      });
    });

    describe('of symmetric key', function () {
      const symmetricKeySize = 79; // raw 44
      it(`works as a ${symmetricKeySize} byte serialization.`, async function () {
        let key = await krypto.generateSymmetricKey(),
            serializedKey = await exportKey(key),
            importedKey = await importKey(serializedKey),
            encrypted = await krypto.encrypt(key, message),
            decrypted = await krypto.decrypt(importedKey, encrypted);
        expect(serializedKey.length).toBe(symmetricKeySize);
        expect(decrypted.text).toBe(message);
      });
    });
  });

  it('wraps like export+encrypt.', async function () {
    // Let's "wrap" a symmetric key with an asymmetric encrypting key in two ways.
    let encryptableKey = await krypto.generateSymmetricKey(),
        wrappingKey = await krypto.generateEncryptingKey(),

        // Cycle it through export,encrypt to encrypted key, and decrypt,import to imported key.
        exported = await krypto.exportJWK(encryptableKey),
        encrypted = await krypto.encrypt(wrappingKey.publicKey, exported),
        decrypted = await krypto.decrypt(wrappingKey.privateKey, encrypted),
        imported = await krypto.importJWK(decrypted.json),

        // Cycle it through wrap and unwrap.
        wrapped = await krypto.wrapKey(encryptableKey, wrappingKey.publicKey),
        unwrapped = await krypto.unwrapKey(wrapped, wrappingKey.privateKey),

        // Use one to encrypt a message, and the other decrypt it.
        message = "this is a message",
        encryptedMessage = await krypto.encrypt(unwrapped, message),
        decryptedMessage = await krypto.decrypt(imported, encryptedMessage);
    isBase64URL(wrapped);
    expect(decryptedMessage.text).toBe(message);
  }, slowKeyCreation);
}

function testMultiKrypto(multiKrypto) {
  const slowKeyCreation = 20e3, // Android
        message = makeMessage();
  describe('falls through to krypto with single keys', function () {
    testKrypto(multiKrypto, scale);
  });

  describe('multi-way keys', function () {

    describe('multi-signature', function () {
      let signingA, signingB;
      beforeAll(async function () {
        signingA = await multiKrypto.generateSigningKey();
        signingB = await multiKrypto.generateSigningKey();
      });

      it('is a multi-signature.', async function () {
        let multiSign = {a: signingA.privateKey, b: signingB.privateKey},
            // Order doesn't matter. just that they correspond as a set.
            multiVerify = {b: signingB.publicKey, a: signingA.publicKey},
            signature = await multiKrypto.sign(multiSign, message),
            verified = await multiKrypto.verify(multiVerify, signature);
        expect(verified).toBeTruthy();
      });
      it('can specify type:"multi" in the signing key for clarify.', async function () {
        let multiSign = {a: signingA.privateKey, b: signingB.privateKey, type:'multi'},
            multiVerify = {a: signingA.publicKey, b: signingB.publicKey},
            signature = await multiKrypto.sign(multiSign, message),
            verified = await multiKrypto.verify(multiVerify, signature);
        expect(verified).toBeTruthy();
      });
      it('can specify type:"multi" in the verifying key for clarify.', async function () {
        let multiSign = {a: signingA.privateKey, b: signingB.privateKey},
            multiVerify = {a: signingA.publicKey, b: signingB.publicKey, type:'multi'},
            signature = await multiKrypto.sign(multiSign, message),
            verified = await multiKrypto.verify(multiVerify, signature);
        expect(verified).toBeTruthy();
      });
      it('can specify iss, act, iat in the key, which will appear in the signature.', async function () {
        let iat = Date.now(),
            iss = 'a',
            act = 'b',
            multiSign = {a: signingA.privateKey, b: signingB.privateKey},
            multiVerify = {a: signingA.publicKey, b: signingB.publicKey},
            signature = await multiKrypto.sign(multiSign, message, {iss, act, iat}),
            verified = await multiKrypto.verify(multiVerify, signature);
        expect(verified).toBeTruthy();
        signature.signatures.forEach(subSignature => {
          let header = multiKrypto.decodeProtectedHeader(subSignature);
          expect(header.iss).toBe(iss);
          expect(header.act).toBe(act);
          expect(header.iat).toBe(iat);
        });
      });
      it('can sign binary and it is recovery as binary from payload property of verfication.', async function () {
        let message = new Uint8Array([1], [2], [3]),
            signature = await multiKrypto.sign({a: signingA.privateKey, b: signingB.privateKey}, message),
            verified = await multiKrypto.verify({a: signingA.publicKey, b: signingB.publicKey}, signature);
        expect(verified.payload).toEqual(message);
      });
      it('can sign string type and it is recoverable as string from text property of verification.', async function () {
        let message = "a string",
            signature = await multiKrypto.sign({a: signingA.privateKey, b: signingB.privateKey}, message),
            verified = await multiKrypto.verify({a: signingA.publicKey, b: signingB.publicKey}, signature);
        expect(verified.text).toEqual(message);
        expect(verified.payload).toEqual(new TextEncoder().encode(message));
      });
      it('can sign a jsonable object and it is recovery as same from json property of result.', async function () {
        let message = {foo: "a string", bar: false, baz: ['a', 2, null]},
            signature = await multiKrypto.sign({a: signingA.privateKey, b: signingB.privateKey}, message),
            verified = await multiKrypto.verify({a: signingA.publicKey, b: signingB.publicKey}, signature);
        expect(verified.json).toEqual(message);
        expect(verified.payload).toEqual(new TextEncoder().encode(JSON.stringify(message)));
      });
      it('can specify a specific cty that will pass through to verify.', async function () {
        let message = {foo: "a string", bar: false, baz: ['a', 2, null]},
            cty = 'application/foo+json',
            signature = await multiKrypto.sign({a: signingA.privateKey, b: signingB.privateKey}, message, {cty}),
            verified = await multiKrypto.verify({a: signingA.publicKey, b: signingB.publicKey}, signature);
        expect(verified.json).toEqual(message);
        expect(verified.protectedHeader.cty).toBe(cty);
        expect(verified.payload).toEqual(new TextEncoder().encode(JSON.stringify(message)));
      });

      it('fails verification if the signature is mislabeled.',
         async function () {
           let multiSign = {a: signingB.privateKey, b: signingA.privateKey}, // Note that the values are not what is claimed.
               multiVerify = {a: signingA.publicKey, b: signingB.publicKey},
               signature = await multiKrypto.sign(multiSign, message),
               verified = await multiKrypto.verify(multiVerify, signature);
           expect(verified).toBeUndefined();
         });
      it('gives enough information that we can tell if a verifying sub key is missing.',
         async function () {
           let multiSign = {a: signingA.privateKey, b: signingB.privateKey},
               multiVerify = {b: signingB.publicKey}, // Missing a.
               signature = await multiKrypto.sign(multiSign, message),
               verified = await multiKrypto.verify(multiVerify, signature);
           // Overall, something we asked for did verify.
           expect(verified.payload).toBeTruthy();
           expect(verified.text).toBe(message);
           // b is second signer in signature
           expect(verified.signers[1].payload).toBeTruthy();
           // but the first signer was not verified
           expect(verified.signers[0].payload).toBeUndefined();
         });
      it('gives enough information that we can tell if a signature sub key is missing.',
         async function () {
           let multiSign = {a: signingA.privateKey}, // Missing b.
               multiVerify = {a: signingA.publicKey, b: signingB.publicKey},
               signature = await multiKrypto.sign(multiSign, message),
               verified = await multiKrypto.verify(multiVerify, signature);
           // Overall, something we asked for did verify.
           expect(verified.payload).toBeTruthy();
           expect(verified.text).toBe(message);
           // But only one signer
           expect(verified.signers.length).toBe(1);
           expect(verified.signers[0].protectedHeader.kid).toBe('a');
           expect(verified.signers[0].payload).toBeTruthy();
         });
    });

    describe('multi-way encryption', function () {
      let encrypted, keypair, symmetric, secretText = "shh!", recipients, encryptingMulti, decryptingMulti;
      beforeAll(async function () {
        symmetric = await multiKrypto.generateSymmetricKey();
        keypair = await multiKrypto.generateEncryptingKey();
        encrypted = await multiKrypto.encrypt({a: symmetric, b: keypair.publicKey, c: secretText}, message);
        recipients = encrypted.recipients;
        let otherKeypair = await multiKrypto.generateEncryptingKey();
        encryptingMulti = {a: keypair.publicKey, b: otherKeypair.publicKey};
        decryptingMulti = {a: keypair.privateKey, b: otherKeypair.privateKey};
      }, slowKeyCreation);
      it('works with symmetric members.', async function () {
        let decrypted = await multiKrypto.decrypt({a: symmetric}, encrypted);
        expect(decrypted.text).toBe(message);
        expect(recipients[0].header.kid).toBe('a');
        expect(recipients[0].header.alg).toBe('A256GCMKW');
      });
      it('works with keypair members.', async function () {
        let decrypted = await multiKrypto.decrypt({b: keypair.privateKey}, encrypted);
        expect(decrypted.text).toBe(message);
        expect(recipients[1].header.kid).toBe('b');
        expect(recipients[1].header.alg).toBe('RSA-OAEP-256');
      });
      it('works with secret text members.', async function () {
        let decrypted = await multiKrypto.decrypt({c: secretText}, encrypted);
        expect(decrypted.text).toBe(message);
        expect(recipients[2].header.kid).toBe('c');
        expect(recipients[2].header.alg).toBe('PBES2-HS512+A256KW');
      });

      it('handles binary, and decrypts as same.', async function () {
        let message = new Uint8Array([21, 31]),
            encrypted = await multiKrypto.encrypt(encryptingMulti, message),
            decrypted = await multiKrypto.decrypt(decryptingMulti, encrypted),
            header = multiKrypto.decodeProtectedHeader(encrypted);
        expect(header.cty).toBeUndefined();
        sameTypedArray(decrypted, message);
      });
      it('handles text, and decrypts as same.', async function () {
        let encrypted = await multiKrypto.encrypt(encryptingMulti, message),
            decrypted = await multiKrypto.decrypt(decryptingMulti, encrypted),
            header = multiKrypto.decodeProtectedHeader(encrypted);
        expect(header.cty).toBe('text/plain');
        expect(decrypted.text).toBe(message);
      });
      it('handles json, and decrypts as same.', async function () {
        let message = {foo: 'bar'},
            encrypted = await multiKrypto.encrypt(encryptingMulti, message);
        let header = multiKrypto.decodeProtectedHeader(encrypted),
            decrypted = await multiKrypto.decrypt(decryptingMulti, encrypted);
        expect(header.cty).toBe('json');
        expect(decrypted.json).toEqual(message);
      });
      it('Uses specified headers if supplied, including cty.', async function () {
        let cty = 'text/html',
            iat = Date.now(),
            foo = 17,
            message = "<something else>",
            encrypted = await multiKrypto.encrypt(encryptingMulti, message, {cty, iat, foo}),
            decrypted = await multiKrypto.decrypt(decryptingMulti, encrypted),
            header = multiKrypto.decodeProtectedHeader(encrypted);
        expect(header.cty).toBe(cty);
        expect(header.iat).toBe(iat);
        expect(header.foo).toBe(foo);
        expect(decrypted.text).toBe(message);
      });

      it('produces undefined for wrong symmetric key.', async function () {
        let anotherKey = await multiKrypto.generateSymmetricKey(),
            decrypted = await multiKrypto.decrypt({a: anotherKey}, encrypted);
        expect(decrypted).toBeUndefined();
      });
      it('produces undefined for wrong keypair.', async function () {
        let anotherKey = await multiKrypto.generateEncryptingKey(),
            decrypted = await multiKrypto.decrypt({b: anotherKey.privateKey}, encrypted);
        expect(decrypted).toBeUndefined();
      });
      it('produces undefined for wrong secret text.', async function () {
        let decrypted = await multiKrypto.decrypt({c: "shh! "}, encrypted); // Extra whitespace
        expect(decrypted).toBeUndefined();
      });
      it('produces undefined for mislabeled key.', async function () {
        let decrypted = await multiKrypto.decrypt({a: secretText}, encrypted); // should be c
        expect(decrypted).toBeUndefined();
      });
    });
  });

  describe('export/wrap', function () {
    let encryptingMultikey, decryptingMultikey;

    beforeAll(async function () {
      let keypair1 = await multiKrypto.generateEncryptingKey(),
          keypair2 = await multiKrypto.generateEncryptingKey(),
          keypair3 = await multiKrypto.generateEncryptingKey();
      encryptingMultikey = {a: keypair1.publicKey, b: keypair2.publicKey};
      decryptingMultikey = {c: keypair3.privateKey, b: keypair2.privateKey};
    }, slowKeyCreation);

    it('exports homogenous member.', async function () {
      let exported = await multiKrypto.exportJWK(encryptingMultikey),
          imported = await multiKrypto.importJWK(exported),
          // Now prove that the imported multikey works.
          encrypted = await multiKrypto.encrypt(imported, message),
          decrypted = await multiKrypto.decrypt(decryptingMultikey, encrypted);
      expect(exported.keys[0].kid).toBe('a');
      expect(exported.keys[1].kid).toBe('b');
      expect(decrypted.text).toBe(message);
    });
    it('export heterogenous members.', async function () {
      let encryptingKeypair = await multiKrypto.generateEncryptingKey(),
          signingKeypair = await multiKrypto.generateSigningKey(),
          exported = await multiKrypto.exportJWK({myDecrypt: encryptingKeypair.privateKey, mySign: signingKeypair.privateKey}),
          imported = await multiKrypto.importJWK(exported),
          // Now prove that the imported multikey works.
          message  = "a smaller message for asymmetric encryption", // Although JOSE always uses hybrid encryption anyway, so size isn't a problem.
          encrypted = await multiKrypto.encrypt(encryptingKeypair.publicKey, message),
          decrypted = await multiKrypto.decrypt(imported.myDecrypt, encrypted),
          signed = await multiKrypto.sign(imported.mySign, message);
      expect(exported.keys[0].kid).toBe('myDecrypt');
      expect(exported.keys[1].kid).toBe('mySign');
      expect(decrypted.text).toBe(message);
      expect(await multiKrypto.verify(signingKeypair.publicKey, signed)).toBeTruthy();
    });

    it('can wrap/unwrap a simple key.', async function () {
      let key = await multiKrypto.generateSymmetricKey(),
          wrapped = await multiKrypto.wrapKey(key, encryptingMultikey),
          unwrapped = await multiKrypto.unwrapKey(wrapped, decryptingMultikey),
          // Cool, now prove that worked.
          encrypted = await multiKrypto.encrypt(unwrapped, message),
          decrypted = await multiKrypto.decrypt(key, encrypted);
      expect(decrypted.text).toBe(message);
    });
    it('can be wrapped/unwrapped by a symmetric key with homogenous members.', async function () {
      let wrappingKey = await multiKrypto.generateSymmetricKey(),
          wrapped = await multiKrypto.wrapKey(encryptingMultikey, wrappingKey),
          unwrapped = await multiKrypto.unwrapKey(wrapped, wrappingKey),
          // Cool, now prove that worked.
          encrypted = await multiKrypto.encrypt(unwrapped, message),
          decrypted = await multiKrypto.decrypt(decryptingMultikey, encrypted);
      expect(decrypted.text).toBe(message);
    });
    it('can wrap/unwrap a symmetric multikey with homogenous members.', async function () {
      let key = {x: await multiKrypto.generateSymmetricKey(), y: await multiKrypto.generateSymmetricKey()},
          wrapped = await multiKrypto.wrapKey(key, encryptingMultikey),
          unwrapped = await multiKrypto.unwrapKey(wrapped, decryptingMultikey),
          // Cool, now prove that worked.
          message = makeMessage(),
          encrypted = await multiKrypto.encrypt(unwrapped, message),
          decrypted = await multiKrypto.decrypt(key, encrypted);
      expect(decrypted.text).toBe(message);
    });
    it('can wrap/unwrap a heterogeneous multikey.', async function () {
      let encryptingKeypair = await multiKrypto.generateEncryptingKey(),
          signingKeypair = await multiKrypto.generateSigningKey(),
          wrapped = await multiKrypto.wrapKey({myDecrypt: encryptingKeypair.privateKey, mySign: signingKeypair.privateKey}, encryptingMultikey),
          unwrapped = await multiKrypto.unwrapKey(wrapped, decryptingMultikey),
          // Cool, now prove that worked.
          message = "a shorter message",
          encrypted = await multiKrypto.encrypt(encryptingKeypair.publicKey, message),
          decrypted = await multiKrypto.decrypt(unwrapped.myDecrypt, encrypted),
          signature = await multiKrypto.sign(unwrapped.mySign, message);
      expect(decrypted.text).toBe(message),
      expect(await multiKrypto.verify(signingKeypair.publicKey, signature)).toBeTruthy();
    }, slowKeyCreation);
  });
}

var crypto$1 = crypto;
const isCryptoKey = (key) => key instanceof CryptoKey;

const digest$1 = async (algorithm, data) => {
    const subtleDigest = `SHA-${algorithm.slice(-3)}`;
    return new Uint8Array(await crypto$1.subtle.digest(subtleDigest, data));
};

const encoder = new TextEncoder();
const decoder = new TextDecoder();
const MAX_INT32 = 2 ** 32;
function concat(...buffers) {
    const size = buffers.reduce((acc, { length }) => acc + length, 0);
    const buf = new Uint8Array(size);
    let i = 0;
    for (const buffer of buffers) {
        buf.set(buffer, i);
        i += buffer.length;
    }
    return buf;
}
function p2s(alg, p2sInput) {
    return concat(encoder.encode(alg), new Uint8Array([0]), p2sInput);
}
function writeUInt32BE(buf, value, offset) {
    if (value < 0 || value >= MAX_INT32) {
        throw new RangeError(`value must be >= 0 and <= ${MAX_INT32 - 1}. Received ${value}`);
    }
    buf.set([value >>> 24, value >>> 16, value >>> 8, value & 0xff], offset);
}
function uint64be(value) {
    const high = Math.floor(value / MAX_INT32);
    const low = value % MAX_INT32;
    const buf = new Uint8Array(8);
    writeUInt32BE(buf, high, 0);
    writeUInt32BE(buf, low, 4);
    return buf;
}
function uint32be(value) {
    const buf = new Uint8Array(4);
    writeUInt32BE(buf, value);
    return buf;
}
function lengthAndInput(input) {
    return concat(uint32be(input.length), input);
}
async function concatKdf(secret, bits, value) {
    const iterations = Math.ceil((bits >> 3) / 32);
    const res = new Uint8Array(iterations * 32);
    for (let iter = 0; iter < iterations; iter++) {
        const buf = new Uint8Array(4 + secret.length + value.length);
        buf.set(uint32be(iter + 1));
        buf.set(secret, 4);
        buf.set(value, 4 + secret.length);
        res.set(await digest$1('sha256', buf), iter * 32);
    }
    return res.slice(0, bits >> 3);
}

const encodeBase64 = (input) => {
    let unencoded = input;
    if (typeof unencoded === 'string') {
        unencoded = encoder.encode(unencoded);
    }
    const CHUNK_SIZE = 0x8000;
    const arr = [];
    for (let i = 0; i < unencoded.length; i += CHUNK_SIZE) {
        arr.push(String.fromCharCode.apply(null, unencoded.subarray(i, i + CHUNK_SIZE)));
    }
    return btoa(arr.join(''));
};
const encode$1 = (input) => {
    return encodeBase64(input).replace(/=/g, '').replace(/\+/g, '-').replace(/\//g, '_');
};
const decodeBase64 = (encoded) => {
    const binary = atob(encoded);
    const bytes = new Uint8Array(binary.length);
    for (let i = 0; i < binary.length; i++) {
        bytes[i] = binary.charCodeAt(i);
    }
    return bytes;
};
const decode$1 = (input) => {
    let encoded = input;
    if (encoded instanceof Uint8Array) {
        encoded = decoder.decode(encoded);
    }
    encoded = encoded.replace(/-/g, '+').replace(/_/g, '/').replace(/\s/g, '');
    try {
        return decodeBase64(encoded);
    }
    catch {
        throw new TypeError('The input to be decoded is not correctly encoded.');
    }
};

class JOSEError extends Error {
    static get code() {
        return 'ERR_JOSE_GENERIC';
    }
    constructor(message) {
        super(message);
        this.code = 'ERR_JOSE_GENERIC';
        this.name = this.constructor.name;
        Error.captureStackTrace?.(this, this.constructor);
    }
}
class JOSEAlgNotAllowed extends JOSEError {
    constructor() {
        super(...arguments);
        this.code = 'ERR_JOSE_ALG_NOT_ALLOWED';
    }
    static get code() {
        return 'ERR_JOSE_ALG_NOT_ALLOWED';
    }
}
class JOSENotSupported extends JOSEError {
    constructor() {
        super(...arguments);
        this.code = 'ERR_JOSE_NOT_SUPPORTED';
    }
    static get code() {
        return 'ERR_JOSE_NOT_SUPPORTED';
    }
}
class JWEDecryptionFailed extends JOSEError {
    constructor() {
        super(...arguments);
        this.code = 'ERR_JWE_DECRYPTION_FAILED';
        this.message = 'decryption operation failed';
    }
    static get code() {
        return 'ERR_JWE_DECRYPTION_FAILED';
    }
}
class JWEInvalid extends JOSEError {
    constructor() {
        super(...arguments);
        this.code = 'ERR_JWE_INVALID';
    }
    static get code() {
        return 'ERR_JWE_INVALID';
    }
}
class JWSInvalid extends JOSEError {
    constructor() {
        super(...arguments);
        this.code = 'ERR_JWS_INVALID';
    }
    static get code() {
        return 'ERR_JWS_INVALID';
    }
}
class JWSSignatureVerificationFailed extends JOSEError {
    constructor() {
        super(...arguments);
        this.code = 'ERR_JWS_SIGNATURE_VERIFICATION_FAILED';
        this.message = 'signature verification failed';
    }
    static get code() {
        return 'ERR_JWS_SIGNATURE_VERIFICATION_FAILED';
    }
}

var random = crypto$1.getRandomValues.bind(crypto$1);

function bitLength$1(alg) {
    switch (alg) {
        case 'A128GCM':
        case 'A128GCMKW':
        case 'A192GCM':
        case 'A192GCMKW':
        case 'A256GCM':
        case 'A256GCMKW':
            return 96;
        case 'A128CBC-HS256':
        case 'A192CBC-HS384':
        case 'A256CBC-HS512':
            return 128;
        default:
            throw new JOSENotSupported(`Unsupported JWE Algorithm: ${alg}`);
    }
}
var generateIv = (alg) => random(new Uint8Array(bitLength$1(alg) >> 3));

const checkIvLength = (enc, iv) => {
    if (iv.length << 3 !== bitLength$1(enc)) {
        throw new JWEInvalid('Invalid Initialization Vector length');
    }
};

const checkCekLength = (cek, expected) => {
    const actual = cek.byteLength << 3;
    if (actual !== expected) {
        throw new JWEInvalid(`Invalid Content Encryption Key length. Expected ${expected} bits, got ${actual} bits`);
    }
};

const timingSafeEqual = (a, b) => {
    if (!(a instanceof Uint8Array)) {
        throw new TypeError('First argument must be a buffer');
    }
    if (!(b instanceof Uint8Array)) {
        throw new TypeError('Second argument must be a buffer');
    }
    if (a.length !== b.length) {
        throw new TypeError('Input buffers must have the same length');
    }
    const len = a.length;
    let out = 0;
    let i = -1;
    while (++i < len) {
        out |= a[i] ^ b[i];
    }
    return out === 0;
};

function unusable(name, prop = 'algorithm.name') {
    return new TypeError(`CryptoKey does not support this operation, its ${prop} must be ${name}`);
}
function isAlgorithm(algorithm, name) {
    return algorithm.name === name;
}
function getHashLength(hash) {
    return parseInt(hash.name.slice(4), 10);
}
function getNamedCurve(alg) {
    switch (alg) {
        case 'ES256':
            return 'P-256';
        case 'ES384':
            return 'P-384';
        case 'ES512':
            return 'P-521';
        default:
            throw new Error('unreachable');
    }
}
function checkUsage(key, usages) {
    if (usages.length && !usages.some((expected) => key.usages.includes(expected))) {
        let msg = 'CryptoKey does not support this operation, its usages must include ';
        if (usages.length > 2) {
            const last = usages.pop();
            msg += `one of ${usages.join(', ')}, or ${last}.`;
        }
        else if (usages.length === 2) {
            msg += `one of ${usages[0]} or ${usages[1]}.`;
        }
        else {
            msg += `${usages[0]}.`;
        }
        throw new TypeError(msg);
    }
}
function checkSigCryptoKey(key, alg, ...usages) {
    switch (alg) {
        case 'HS256':
        case 'HS384':
        case 'HS512': {
            if (!isAlgorithm(key.algorithm, 'HMAC'))
                throw unusable('HMAC');
            const expected = parseInt(alg.slice(2), 10);
            const actual = getHashLength(key.algorithm.hash);
            if (actual !== expected)
                throw unusable(`SHA-${expected}`, 'algorithm.hash');
            break;
        }
        case 'RS256':
        case 'RS384':
        case 'RS512': {
            if (!isAlgorithm(key.algorithm, 'RSASSA-PKCS1-v1_5'))
                throw unusable('RSASSA-PKCS1-v1_5');
            const expected = parseInt(alg.slice(2), 10);
            const actual = getHashLength(key.algorithm.hash);
            if (actual !== expected)
                throw unusable(`SHA-${expected}`, 'algorithm.hash');
            break;
        }
        case 'PS256':
        case 'PS384':
        case 'PS512': {
            if (!isAlgorithm(key.algorithm, 'RSA-PSS'))
                throw unusable('RSA-PSS');
            const expected = parseInt(alg.slice(2), 10);
            const actual = getHashLength(key.algorithm.hash);
            if (actual !== expected)
                throw unusable(`SHA-${expected}`, 'algorithm.hash');
            break;
        }
        case 'EdDSA': {
            if (key.algorithm.name !== 'Ed25519' && key.algorithm.name !== 'Ed448') {
                throw unusable('Ed25519 or Ed448');
            }
            break;
        }
        case 'ES256':
        case 'ES384':
        case 'ES512': {
            if (!isAlgorithm(key.algorithm, 'ECDSA'))
                throw unusable('ECDSA');
            const expected = getNamedCurve(alg);
            const actual = key.algorithm.namedCurve;
            if (actual !== expected)
                throw unusable(expected, 'algorithm.namedCurve');
            break;
        }
        default:
            throw new TypeError('CryptoKey does not support this operation');
    }
    checkUsage(key, usages);
}
function checkEncCryptoKey(key, alg, ...usages) {
    switch (alg) {
        case 'A128GCM':
        case 'A192GCM':
        case 'A256GCM': {
            if (!isAlgorithm(key.algorithm, 'AES-GCM'))
                throw unusable('AES-GCM');
            const expected = parseInt(alg.slice(1, 4), 10);
            const actual = key.algorithm.length;
            if (actual !== expected)
                throw unusable(expected, 'algorithm.length');
            break;
        }
        case 'A128KW':
        case 'A192KW':
        case 'A256KW': {
            if (!isAlgorithm(key.algorithm, 'AES-KW'))
                throw unusable('AES-KW');
            const expected = parseInt(alg.slice(1, 4), 10);
            const actual = key.algorithm.length;
            if (actual !== expected)
                throw unusable(expected, 'algorithm.length');
            break;
        }
        case 'ECDH': {
            switch (key.algorithm.name) {
                case 'ECDH':
                case 'X25519':
                case 'X448':
                    break;
                default:
                    throw unusable('ECDH, X25519, or X448');
            }
            break;
        }
        case 'PBES2-HS256+A128KW':
        case 'PBES2-HS384+A192KW':
        case 'PBES2-HS512+A256KW':
            if (!isAlgorithm(key.algorithm, 'PBKDF2'))
                throw unusable('PBKDF2');
            break;
        case 'RSA-OAEP':
        case 'RSA-OAEP-256':
        case 'RSA-OAEP-384':
        case 'RSA-OAEP-512': {
            if (!isAlgorithm(key.algorithm, 'RSA-OAEP'))
                throw unusable('RSA-OAEP');
            const expected = parseInt(alg.slice(9), 10) || 1;
            const actual = getHashLength(key.algorithm.hash);
            if (actual !== expected)
                throw unusable(`SHA-${expected}`, 'algorithm.hash');
            break;
        }
        default:
            throw new TypeError('CryptoKey does not support this operation');
    }
    checkUsage(key, usages);
}

function message(msg, actual, ...types) {
    if (types.length > 2) {
        const last = types.pop();
        msg += `one of type ${types.join(', ')}, or ${last}.`;
    }
    else if (types.length === 2) {
        msg += `one of type ${types[0]} or ${types[1]}.`;
    }
    else {
        msg += `of type ${types[0]}.`;
    }
    if (actual == null) {
        msg += ` Received ${actual}`;
    }
    else if (typeof actual === 'function' && actual.name) {
        msg += ` Received function ${actual.name}`;
    }
    else if (typeof actual === 'object' && actual != null) {
        if (actual.constructor?.name) {
            msg += ` Received an instance of ${actual.constructor.name}`;
        }
    }
    return msg;
}
var invalidKeyInput = (actual, ...types) => {
    return message('Key must be ', actual, ...types);
};
function withAlg(alg, actual, ...types) {
    return message(`Key for the ${alg} algorithm must be `, actual, ...types);
}

var isKeyLike = (key) => {
    return isCryptoKey(key);
};
const types = ['CryptoKey'];

async function cbcDecrypt(enc, cek, ciphertext, iv, tag, aad) {
    if (!(cek instanceof Uint8Array)) {
        throw new TypeError(invalidKeyInput(cek, 'Uint8Array'));
    }
    const keySize = parseInt(enc.slice(1, 4), 10);
    const encKey = await crypto$1.subtle.importKey('raw', cek.subarray(keySize >> 3), 'AES-CBC', false, ['decrypt']);
    const macKey = await crypto$1.subtle.importKey('raw', cek.subarray(0, keySize >> 3), {
        hash: `SHA-${keySize << 1}`,
        name: 'HMAC',
    }, false, ['sign']);
    const macData = concat(aad, iv, ciphertext, uint64be(aad.length << 3));
    const expectedTag = new Uint8Array((await crypto$1.subtle.sign('HMAC', macKey, macData)).slice(0, keySize >> 3));
    let macCheckPassed;
    try {
        macCheckPassed = timingSafeEqual(tag, expectedTag);
    }
    catch {
    }
    if (!macCheckPassed) {
        throw new JWEDecryptionFailed();
    }
    let plaintext;
    try {
        plaintext = new Uint8Array(await crypto$1.subtle.decrypt({ iv, name: 'AES-CBC' }, encKey, ciphertext));
    }
    catch {
    }
    if (!plaintext) {
        throw new JWEDecryptionFailed();
    }
    return plaintext;
}
async function gcmDecrypt(enc, cek, ciphertext, iv, tag, aad) {
    let encKey;
    if (cek instanceof Uint8Array) {
        encKey = await crypto$1.subtle.importKey('raw', cek, 'AES-GCM', false, ['decrypt']);
    }
    else {
        checkEncCryptoKey(cek, enc, 'decrypt');
        encKey = cek;
    }
    try {
        return new Uint8Array(await crypto$1.subtle.decrypt({
            additionalData: aad,
            iv,
            name: 'AES-GCM',
            tagLength: 128,
        }, encKey, concat(ciphertext, tag)));
    }
    catch {
        throw new JWEDecryptionFailed();
    }
}
const decrypt$2 = async (enc, cek, ciphertext, iv, tag, aad) => {
    if (!isCryptoKey(cek) && !(cek instanceof Uint8Array)) {
        throw new TypeError(invalidKeyInput(cek, ...types, 'Uint8Array'));
    }
    if (!iv) {
        throw new JWEInvalid('JWE Initialization Vector missing');
    }
    if (!tag) {
        throw new JWEInvalid('JWE Authentication Tag missing');
    }
    checkIvLength(enc, iv);
    switch (enc) {
        case 'A128CBC-HS256':
        case 'A192CBC-HS384':
        case 'A256CBC-HS512':
            if (cek instanceof Uint8Array)
                checkCekLength(cek, parseInt(enc.slice(-3), 10));
            return cbcDecrypt(enc, cek, ciphertext, iv, tag, aad);
        case 'A128GCM':
        case 'A192GCM':
        case 'A256GCM':
            if (cek instanceof Uint8Array)
                checkCekLength(cek, parseInt(enc.slice(1, 4), 10));
            return gcmDecrypt(enc, cek, ciphertext, iv, tag, aad);
        default:
            throw new JOSENotSupported('Unsupported JWE Content Encryption Algorithm');
    }
};

const isDisjoint = (...headers) => {
    const sources = headers.filter(Boolean);
    if (sources.length === 0 || sources.length === 1) {
        return true;
    }
    let acc;
    for (const header of sources) {
        const parameters = Object.keys(header);
        if (!acc || acc.size === 0) {
            acc = new Set(parameters);
            continue;
        }
        for (const parameter of parameters) {
            if (acc.has(parameter)) {
                return false;
            }
            acc.add(parameter);
        }
    }
    return true;
};

function isObjectLike(value) {
    return typeof value === 'object' && value !== null;
}
function isObject(input) {
    if (!isObjectLike(input) || Object.prototype.toString.call(input) !== '[object Object]') {
        return false;
    }
    if (Object.getPrototypeOf(input) === null) {
        return true;
    }
    let proto = input;
    while (Object.getPrototypeOf(proto) !== null) {
        proto = Object.getPrototypeOf(proto);
    }
    return Object.getPrototypeOf(input) === proto;
}

const bogusWebCrypto = [
    { hash: 'SHA-256', name: 'HMAC' },
    true,
    ['sign'],
];

function checkKeySize(key, alg) {
    if (key.algorithm.length !== parseInt(alg.slice(1, 4), 10)) {
        throw new TypeError(`Invalid key size for alg: ${alg}`);
    }
}
function getCryptoKey$2(key, alg, usage) {
    if (isCryptoKey(key)) {
        checkEncCryptoKey(key, alg, usage);
        return key;
    }
    if (key instanceof Uint8Array) {
        return crypto$1.subtle.importKey('raw', key, 'AES-KW', true, [usage]);
    }
    throw new TypeError(invalidKeyInput(key, ...types, 'Uint8Array'));
}
const wrap$1 = async (alg, key, cek) => {
    const cryptoKey = await getCryptoKey$2(key, alg, 'wrapKey');
    checkKeySize(cryptoKey, alg);
    const cryptoKeyCek = await crypto$1.subtle.importKey('raw', cek, ...bogusWebCrypto);
    return new Uint8Array(await crypto$1.subtle.wrapKey('raw', cryptoKeyCek, cryptoKey, 'AES-KW'));
};
const unwrap$1 = async (alg, key, encryptedKey) => {
    const cryptoKey = await getCryptoKey$2(key, alg, 'unwrapKey');
    checkKeySize(cryptoKey, alg);
    const cryptoKeyCek = await crypto$1.subtle.unwrapKey('raw', encryptedKey, cryptoKey, 'AES-KW', ...bogusWebCrypto);
    return new Uint8Array(await crypto$1.subtle.exportKey('raw', cryptoKeyCek));
};

async function deriveKey$1(publicKey, privateKey, algorithm, keyLength, apu = new Uint8Array(0), apv = new Uint8Array(0)) {
    if (!isCryptoKey(publicKey)) {
        throw new TypeError(invalidKeyInput(publicKey, ...types));
    }
    checkEncCryptoKey(publicKey, 'ECDH');
    if (!isCryptoKey(privateKey)) {
        throw new TypeError(invalidKeyInput(privateKey, ...types));
    }
    checkEncCryptoKey(privateKey, 'ECDH', 'deriveBits');
    const value = concat(lengthAndInput(encoder.encode(algorithm)), lengthAndInput(apu), lengthAndInput(apv), uint32be(keyLength));
    let length;
    if (publicKey.algorithm.name === 'X25519') {
        length = 256;
    }
    else if (publicKey.algorithm.name === 'X448') {
        length = 448;
    }
    else {
        length =
            Math.ceil(parseInt(publicKey.algorithm.namedCurve.substr(-3), 10) / 8) << 3;
    }
    const sharedSecret = new Uint8Array(await crypto$1.subtle.deriveBits({
        name: publicKey.algorithm.name,
        public: publicKey,
    }, privateKey, length));
    return concatKdf(sharedSecret, keyLength, value);
}
async function generateEpk(key) {
    if (!isCryptoKey(key)) {
        throw new TypeError(invalidKeyInput(key, ...types));
    }
    return crypto$1.subtle.generateKey(key.algorithm, true, ['deriveBits']);
}
function ecdhAllowed(key) {
    if (!isCryptoKey(key)) {
        throw new TypeError(invalidKeyInput(key, ...types));
    }
    return (['P-256', 'P-384', 'P-521'].includes(key.algorithm.namedCurve) ||
        key.algorithm.name === 'X25519' ||
        key.algorithm.name === 'X448');
}

function checkP2s(p2s) {
    if (!(p2s instanceof Uint8Array) || p2s.length < 8) {
        throw new JWEInvalid('PBES2 Salt Input must be 8 or more octets');
    }
}

function getCryptoKey$1(key, alg) {
    if (key instanceof Uint8Array) {
        return crypto$1.subtle.importKey('raw', key, 'PBKDF2', false, ['deriveBits']);
    }
    if (isCryptoKey(key)) {
        checkEncCryptoKey(key, alg, 'deriveBits', 'deriveKey');
        return key;
    }
    throw new TypeError(invalidKeyInput(key, ...types, 'Uint8Array'));
}
async function deriveKey(p2s$1, alg, p2c, key) {
    checkP2s(p2s$1);
    const salt = p2s(alg, p2s$1);
    const keylen = parseInt(alg.slice(13, 16), 10);
    const subtleAlg = {
        hash: `SHA-${alg.slice(8, 11)}`,
        iterations: p2c,
        name: 'PBKDF2',
        salt,
    };
    const wrapAlg = {
        length: keylen,
        name: 'AES-KW',
    };
    const cryptoKey = await getCryptoKey$1(key, alg);
    if (cryptoKey.usages.includes('deriveBits')) {
        return new Uint8Array(await crypto$1.subtle.deriveBits(subtleAlg, cryptoKey, keylen));
    }
    if (cryptoKey.usages.includes('deriveKey')) {
        return crypto$1.subtle.deriveKey(subtleAlg, cryptoKey, wrapAlg, false, ['wrapKey', 'unwrapKey']);
    }
    throw new TypeError('PBKDF2 key "usages" must include "deriveBits" or "deriveKey"');
}
const encrypt$2 = async (alg, key, cek, p2c = 2048, p2s = random(new Uint8Array(16))) => {
    const derived = await deriveKey(p2s, alg, p2c, key);
    const encryptedKey = await wrap$1(alg.slice(-6), derived, cek);
    return { encryptedKey, p2c, p2s: encode$1(p2s) };
};
const decrypt$1 = async (alg, key, encryptedKey, p2c, p2s) => {
    const derived = await deriveKey(p2s, alg, p2c, key);
    return unwrap$1(alg.slice(-6), derived, encryptedKey);
};

function subtleRsaEs(alg) {
    switch (alg) {
        case 'RSA-OAEP':
        case 'RSA-OAEP-256':
        case 'RSA-OAEP-384':
        case 'RSA-OAEP-512':
            return 'RSA-OAEP';
        default:
            throw new JOSENotSupported(`alg ${alg} is not supported either by JOSE or your javascript runtime`);
    }
}

var checkKeyLength = (alg, key) => {
    if (alg.startsWith('RS') || alg.startsWith('PS')) {
        const { modulusLength } = key.algorithm;
        if (typeof modulusLength !== 'number' || modulusLength < 2048) {
            throw new TypeError(`${alg} requires key modulusLength to be 2048 bits or larger`);
        }
    }
};

const encrypt$1 = async (alg, key, cek) => {
    if (!isCryptoKey(key)) {
        throw new TypeError(invalidKeyInput(key, ...types));
    }
    checkEncCryptoKey(key, alg, 'encrypt', 'wrapKey');
    checkKeyLength(alg, key);
    if (key.usages.includes('encrypt')) {
        return new Uint8Array(await crypto$1.subtle.encrypt(subtleRsaEs(alg), key, cek));
    }
    if (key.usages.includes('wrapKey')) {
        const cryptoKeyCek = await crypto$1.subtle.importKey('raw', cek, ...bogusWebCrypto);
        return new Uint8Array(await crypto$1.subtle.wrapKey('raw', cryptoKeyCek, key, subtleRsaEs(alg)));
    }
    throw new TypeError('RSA-OAEP key "usages" must include "encrypt" or "wrapKey" for this operation');
};
const decrypt = async (alg, key, encryptedKey) => {
    if (!isCryptoKey(key)) {
        throw new TypeError(invalidKeyInput(key, ...types));
    }
    checkEncCryptoKey(key, alg, 'decrypt', 'unwrapKey');
    checkKeyLength(alg, key);
    if (key.usages.includes('decrypt')) {
        return new Uint8Array(await crypto$1.subtle.decrypt(subtleRsaEs(alg), key, encryptedKey));
    }
    if (key.usages.includes('unwrapKey')) {
        const cryptoKeyCek = await crypto$1.subtle.unwrapKey('raw', encryptedKey, key, subtleRsaEs(alg), ...bogusWebCrypto);
        return new Uint8Array(await crypto$1.subtle.exportKey('raw', cryptoKeyCek));
    }
    throw new TypeError('RSA-OAEP key "usages" must include "decrypt" or "unwrapKey" for this operation');
};

function bitLength(alg) {
    switch (alg) {
        case 'A128GCM':
            return 128;
        case 'A192GCM':
            return 192;
        case 'A256GCM':
        case 'A128CBC-HS256':
            return 256;
        case 'A192CBC-HS384':
            return 384;
        case 'A256CBC-HS512':
            return 512;
        default:
            throw new JOSENotSupported(`Unsupported JWE Algorithm: ${alg}`);
    }
}
var generateCek = (alg) => random(new Uint8Array(bitLength(alg) >> 3));

function subtleMapping(jwk) {
    let algorithm;
    let keyUsages;
    switch (jwk.kty) {
        case 'RSA': {
            switch (jwk.alg) {
                case 'PS256':
                case 'PS384':
                case 'PS512':
                    algorithm = { name: 'RSA-PSS', hash: `SHA-${jwk.alg.slice(-3)}` };
                    keyUsages = jwk.d ? ['sign'] : ['verify'];
                    break;
                case 'RS256':
                case 'RS384':
                case 'RS512':
                    algorithm = { name: 'RSASSA-PKCS1-v1_5', hash: `SHA-${jwk.alg.slice(-3)}` };
                    keyUsages = jwk.d ? ['sign'] : ['verify'];
                    break;
                case 'RSA-OAEP':
                case 'RSA-OAEP-256':
                case 'RSA-OAEP-384':
                case 'RSA-OAEP-512':
                    algorithm = {
                        name: 'RSA-OAEP',
                        hash: `SHA-${parseInt(jwk.alg.slice(-3), 10) || 1}`,
                    };
                    keyUsages = jwk.d ? ['decrypt', 'unwrapKey'] : ['encrypt', 'wrapKey'];
                    break;
                default:
                    throw new JOSENotSupported('Invalid or unsupported JWK "alg" (Algorithm) Parameter value');
            }
            break;
        }
        case 'EC': {
            switch (jwk.alg) {
                case 'ES256':
                    algorithm = { name: 'ECDSA', namedCurve: 'P-256' };
                    keyUsages = jwk.d ? ['sign'] : ['verify'];
                    break;
                case 'ES384':
                    algorithm = { name: 'ECDSA', namedCurve: 'P-384' };
                    keyUsages = jwk.d ? ['sign'] : ['verify'];
                    break;
                case 'ES512':
                    algorithm = { name: 'ECDSA', namedCurve: 'P-521' };
                    keyUsages = jwk.d ? ['sign'] : ['verify'];
                    break;
                case 'ECDH-ES':
                case 'ECDH-ES+A128KW':
                case 'ECDH-ES+A192KW':
                case 'ECDH-ES+A256KW':
                    algorithm = { name: 'ECDH', namedCurve: jwk.crv };
                    keyUsages = jwk.d ? ['deriveBits'] : [];
                    break;
                default:
                    throw new JOSENotSupported('Invalid or unsupported JWK "alg" (Algorithm) Parameter value');
            }
            break;
        }
        case 'OKP': {
            switch (jwk.alg) {
                case 'EdDSA':
                    algorithm = { name: jwk.crv };
                    keyUsages = jwk.d ? ['sign'] : ['verify'];
                    break;
                case 'ECDH-ES':
                case 'ECDH-ES+A128KW':
                case 'ECDH-ES+A192KW':
                case 'ECDH-ES+A256KW':
                    algorithm = { name: jwk.crv };
                    keyUsages = jwk.d ? ['deriveBits'] : [];
                    break;
                default:
                    throw new JOSENotSupported('Invalid or unsupported JWK "alg" (Algorithm) Parameter value');
            }
            break;
        }
        default:
            throw new JOSENotSupported('Invalid or unsupported JWK "kty" (Key Type) Parameter value');
    }
    return { algorithm, keyUsages };
}
const parse = async (jwk) => {
    if (!jwk.alg) {
        throw new TypeError('"alg" argument is required when "jwk.alg" is not present');
    }
    const { algorithm, keyUsages } = subtleMapping(jwk);
    const rest = [
        algorithm,
        jwk.ext ?? false,
        jwk.key_ops ?? keyUsages,
    ];
    const keyData = { ...jwk };
    delete keyData.alg;
    delete keyData.use;
    return crypto$1.subtle.importKey('jwk', keyData, ...rest);
};
var asKeyObject = parse;

async function importJWK(jwk, alg) {
    if (!isObject(jwk)) {
        throw new TypeError('JWK must be an object');
    }
    alg || (alg = jwk.alg);
    switch (jwk.kty) {
        case 'oct':
            if (typeof jwk.k !== 'string' || !jwk.k) {
                throw new TypeError('missing "k" (Key Value) Parameter value');
            }
            return decode$1(jwk.k);
        case 'RSA':
            if (jwk.oth !== undefined) {
                throw new JOSENotSupported('RSA JWK "oth" (Other Primes Info) Parameter value is not supported');
            }
        case 'EC':
        case 'OKP':
            return asKeyObject({ ...jwk, alg });
        default:
            throw new JOSENotSupported('Unsupported "kty" (Key Type) Parameter value');
    }
}

const symmetricTypeCheck = (alg, key) => {
    if (key instanceof Uint8Array)
        return;
    if (!isKeyLike(key)) {
        throw new TypeError(withAlg(alg, key, ...types, 'Uint8Array'));
    }
    if (key.type !== 'secret') {
        throw new TypeError(`${types.join(' or ')} instances for symmetric algorithms must be of type "secret"`);
    }
};
const asymmetricTypeCheck = (alg, key, usage) => {
    if (!isKeyLike(key)) {
        throw new TypeError(withAlg(alg, key, ...types));
    }
    if (key.type === 'secret') {
        throw new TypeError(`${types.join(' or ')} instances for asymmetric algorithms must not be of type "secret"`);
    }
    if (usage === 'sign' && key.type === 'public') {
        throw new TypeError(`${types.join(' or ')} instances for asymmetric algorithm signing must be of type "private"`);
    }
    if (usage === 'decrypt' && key.type === 'public') {
        throw new TypeError(`${types.join(' or ')} instances for asymmetric algorithm decryption must be of type "private"`);
    }
    if (key.algorithm && usage === 'verify' && key.type === 'private') {
        throw new TypeError(`${types.join(' or ')} instances for asymmetric algorithm verifying must be of type "public"`);
    }
    if (key.algorithm && usage === 'encrypt' && key.type === 'private') {
        throw new TypeError(`${types.join(' or ')} instances for asymmetric algorithm encryption must be of type "public"`);
    }
};
const checkKeyType = (alg, key, usage) => {
    const symmetric = alg.startsWith('HS') ||
        alg === 'dir' ||
        alg.startsWith('PBES2') ||
        /^A\d{3}(?:GCM)?KW$/.test(alg);
    if (symmetric) {
        symmetricTypeCheck(alg, key);
    }
    else {
        asymmetricTypeCheck(alg, key, usage);
    }
};

async function cbcEncrypt(enc, plaintext, cek, iv, aad) {
    if (!(cek instanceof Uint8Array)) {
        throw new TypeError(invalidKeyInput(cek, 'Uint8Array'));
    }
    const keySize = parseInt(enc.slice(1, 4), 10);
    const encKey = await crypto$1.subtle.importKey('raw', cek.subarray(keySize >> 3), 'AES-CBC', false, ['encrypt']);
    const macKey = await crypto$1.subtle.importKey('raw', cek.subarray(0, keySize >> 3), {
        hash: `SHA-${keySize << 1}`,
        name: 'HMAC',
    }, false, ['sign']);
    const ciphertext = new Uint8Array(await crypto$1.subtle.encrypt({
        iv,
        name: 'AES-CBC',
    }, encKey, plaintext));
    const macData = concat(aad, iv, ciphertext, uint64be(aad.length << 3));
    const tag = new Uint8Array((await crypto$1.subtle.sign('HMAC', macKey, macData)).slice(0, keySize >> 3));
    return { ciphertext, tag, iv };
}
async function gcmEncrypt(enc, plaintext, cek, iv, aad) {
    let encKey;
    if (cek instanceof Uint8Array) {
        encKey = await crypto$1.subtle.importKey('raw', cek, 'AES-GCM', false, ['encrypt']);
    }
    else {
        checkEncCryptoKey(cek, enc, 'encrypt');
        encKey = cek;
    }
    const encrypted = new Uint8Array(await crypto$1.subtle.encrypt({
        additionalData: aad,
        iv,
        name: 'AES-GCM',
        tagLength: 128,
    }, encKey, plaintext));
    const tag = encrypted.slice(-16);
    const ciphertext = encrypted.slice(0, -16);
    return { ciphertext, tag, iv };
}
const encrypt = async (enc, plaintext, cek, iv, aad) => {
    if (!isCryptoKey(cek) && !(cek instanceof Uint8Array)) {
        throw new TypeError(invalidKeyInput(cek, ...types, 'Uint8Array'));
    }
    if (iv) {
        checkIvLength(enc, iv);
    }
    else {
        iv = generateIv(enc);
    }
    switch (enc) {
        case 'A128CBC-HS256':
        case 'A192CBC-HS384':
        case 'A256CBC-HS512':
            if (cek instanceof Uint8Array) {
                checkCekLength(cek, parseInt(enc.slice(-3), 10));
            }
            return cbcEncrypt(enc, plaintext, cek, iv, aad);
        case 'A128GCM':
        case 'A192GCM':
        case 'A256GCM':
            if (cek instanceof Uint8Array) {
                checkCekLength(cek, parseInt(enc.slice(1, 4), 10));
            }
            return gcmEncrypt(enc, plaintext, cek, iv, aad);
        default:
            throw new JOSENotSupported('Unsupported JWE Content Encryption Algorithm');
    }
};

async function wrap(alg, key, cek, iv) {
    const jweAlgorithm = alg.slice(0, 7);
    const wrapped = await encrypt(jweAlgorithm, cek, key, iv, new Uint8Array(0));
    return {
        encryptedKey: wrapped.ciphertext,
        iv: encode$1(wrapped.iv),
        tag: encode$1(wrapped.tag),
    };
}
async function unwrap(alg, key, encryptedKey, iv, tag) {
    const jweAlgorithm = alg.slice(0, 7);
    return decrypt$2(jweAlgorithm, key, encryptedKey, iv, tag, new Uint8Array(0));
}

async function decryptKeyManagement(alg, key, encryptedKey, joseHeader, options) {
    checkKeyType(alg, key, 'decrypt');
    switch (alg) {
        case 'dir': {
            if (encryptedKey !== undefined)
                throw new JWEInvalid('Encountered unexpected JWE Encrypted Key');
            return key;
        }
        case 'ECDH-ES':
            if (encryptedKey !== undefined)
                throw new JWEInvalid('Encountered unexpected JWE Encrypted Key');
        case 'ECDH-ES+A128KW':
        case 'ECDH-ES+A192KW':
        case 'ECDH-ES+A256KW': {
            if (!isObject(joseHeader.epk))
                throw new JWEInvalid(`JOSE Header "epk" (Ephemeral Public Key) missing or invalid`);
            if (!ecdhAllowed(key))
                throw new JOSENotSupported('ECDH with the provided key is not allowed or not supported by your javascript runtime');
            const epk = await importJWK(joseHeader.epk, alg);
            let partyUInfo;
            let partyVInfo;
            if (joseHeader.apu !== undefined) {
                if (typeof joseHeader.apu !== 'string')
                    throw new JWEInvalid(`JOSE Header "apu" (Agreement PartyUInfo) invalid`);
                try {
                    partyUInfo = decode$1(joseHeader.apu);
                }
                catch {
                    throw new JWEInvalid('Failed to base64url decode the apu');
                }
            }
            if (joseHeader.apv !== undefined) {
                if (typeof joseHeader.apv !== 'string')
                    throw new JWEInvalid(`JOSE Header "apv" (Agreement PartyVInfo) invalid`);
                try {
                    partyVInfo = decode$1(joseHeader.apv);
                }
                catch {
                    throw new JWEInvalid('Failed to base64url decode the apv');
                }
            }
            const sharedSecret = await deriveKey$1(epk, key, alg === 'ECDH-ES' ? joseHeader.enc : alg, alg === 'ECDH-ES' ? bitLength(joseHeader.enc) : parseInt(alg.slice(-5, -2), 10), partyUInfo, partyVInfo);
            if (alg === 'ECDH-ES')
                return sharedSecret;
            if (encryptedKey === undefined)
                throw new JWEInvalid('JWE Encrypted Key missing');
            return unwrap$1(alg.slice(-6), sharedSecret, encryptedKey);
        }
        case 'RSA1_5':
        case 'RSA-OAEP':
        case 'RSA-OAEP-256':
        case 'RSA-OAEP-384':
        case 'RSA-OAEP-512': {
            if (encryptedKey === undefined)
                throw new JWEInvalid('JWE Encrypted Key missing');
            return decrypt(alg, key, encryptedKey);
        }
        case 'PBES2-HS256+A128KW':
        case 'PBES2-HS384+A192KW':
        case 'PBES2-HS512+A256KW': {
            if (encryptedKey === undefined)
                throw new JWEInvalid('JWE Encrypted Key missing');
            if (typeof joseHeader.p2c !== 'number')
                throw new JWEInvalid(`JOSE Header "p2c" (PBES2 Count) missing or invalid`);
            const p2cLimit = options?.maxPBES2Count || 10000;
            if (joseHeader.p2c > p2cLimit)
                throw new JWEInvalid(`JOSE Header "p2c" (PBES2 Count) out is of acceptable bounds`);
            if (typeof joseHeader.p2s !== 'string')
                throw new JWEInvalid(`JOSE Header "p2s" (PBES2 Salt) missing or invalid`);
            let p2s;
            try {
                p2s = decode$1(joseHeader.p2s);
            }
            catch {
                throw new JWEInvalid('Failed to base64url decode the p2s');
            }
            return decrypt$1(alg, key, encryptedKey, joseHeader.p2c, p2s);
        }
        case 'A128KW':
        case 'A192KW':
        case 'A256KW': {
            if (encryptedKey === undefined)
                throw new JWEInvalid('JWE Encrypted Key missing');
            return unwrap$1(alg, key, encryptedKey);
        }
        case 'A128GCMKW':
        case 'A192GCMKW':
        case 'A256GCMKW': {
            if (encryptedKey === undefined)
                throw new JWEInvalid('JWE Encrypted Key missing');
            if (typeof joseHeader.iv !== 'string')
                throw new JWEInvalid(`JOSE Header "iv" (Initialization Vector) missing or invalid`);
            if (typeof joseHeader.tag !== 'string')
                throw new JWEInvalid(`JOSE Header "tag" (Authentication Tag) missing or invalid`);
            let iv;
            try {
                iv = decode$1(joseHeader.iv);
            }
            catch {
                throw new JWEInvalid('Failed to base64url decode the iv');
            }
            let tag;
            try {
                tag = decode$1(joseHeader.tag);
            }
            catch {
                throw new JWEInvalid('Failed to base64url decode the tag');
            }
            return unwrap(alg, key, encryptedKey, iv, tag);
        }
        default: {
            throw new JOSENotSupported('Invalid or unsupported "alg" (JWE Algorithm) header value');
        }
    }
}

function validateCrit(Err, recognizedDefault, recognizedOption, protectedHeader, joseHeader) {
    if (joseHeader.crit !== undefined && protectedHeader?.crit === undefined) {
        throw new Err('"crit" (Critical) Header Parameter MUST be integrity protected');
    }
    if (!protectedHeader || protectedHeader.crit === undefined) {
        return new Set();
    }
    if (!Array.isArray(protectedHeader.crit) ||
        protectedHeader.crit.length === 0 ||
        protectedHeader.crit.some((input) => typeof input !== 'string' || input.length === 0)) {
        throw new Err('"crit" (Critical) Header Parameter MUST be an array of non-empty strings when present');
    }
    let recognized;
    if (recognizedOption !== undefined) {
        recognized = new Map([...Object.entries(recognizedOption), ...recognizedDefault.entries()]);
    }
    else {
        recognized = recognizedDefault;
    }
    for (const parameter of protectedHeader.crit) {
        if (!recognized.has(parameter)) {
            throw new JOSENotSupported(`Extension Header Parameter "${parameter}" is not recognized`);
        }
        if (joseHeader[parameter] === undefined) {
            throw new Err(`Extension Header Parameter "${parameter}" is missing`);
        }
        if (recognized.get(parameter) && protectedHeader[parameter] === undefined) {
            throw new Err(`Extension Header Parameter "${parameter}" MUST be integrity protected`);
        }
    }
    return new Set(protectedHeader.crit);
}

const validateAlgorithms = (option, algorithms) => {
    if (algorithms !== undefined &&
        (!Array.isArray(algorithms) || algorithms.some((s) => typeof s !== 'string'))) {
        throw new TypeError(`"${option}" option must be an array of strings`);
    }
    if (!algorithms) {
        return undefined;
    }
    return new Set(algorithms);
};

async function flattenedDecrypt(jwe, key, options) {
    if (!isObject(jwe)) {
        throw new JWEInvalid('Flattened JWE must be an object');
    }
    if (jwe.protected === undefined && jwe.header === undefined && jwe.unprotected === undefined) {
        throw new JWEInvalid('JOSE Header missing');
    }
    if (jwe.iv !== undefined && typeof jwe.iv !== 'string') {
        throw new JWEInvalid('JWE Initialization Vector incorrect type');
    }
    if (typeof jwe.ciphertext !== 'string') {
        throw new JWEInvalid('JWE Ciphertext missing or incorrect type');
    }
    if (jwe.tag !== undefined && typeof jwe.tag !== 'string') {
        throw new JWEInvalid('JWE Authentication Tag incorrect type');
    }
    if (jwe.protected !== undefined && typeof jwe.protected !== 'string') {
        throw new JWEInvalid('JWE Protected Header incorrect type');
    }
    if (jwe.encrypted_key !== undefined && typeof jwe.encrypted_key !== 'string') {
        throw new JWEInvalid('JWE Encrypted Key incorrect type');
    }
    if (jwe.aad !== undefined && typeof jwe.aad !== 'string') {
        throw new JWEInvalid('JWE AAD incorrect type');
    }
    if (jwe.header !== undefined && !isObject(jwe.header)) {
        throw new JWEInvalid('JWE Shared Unprotected Header incorrect type');
    }
    if (jwe.unprotected !== undefined && !isObject(jwe.unprotected)) {
        throw new JWEInvalid('JWE Per-Recipient Unprotected Header incorrect type');
    }
    let parsedProt;
    if (jwe.protected) {
        try {
            const protectedHeader = decode$1(jwe.protected);
            parsedProt = JSON.parse(decoder.decode(protectedHeader));
        }
        catch {
            throw new JWEInvalid('JWE Protected Header is invalid');
        }
    }
    if (!isDisjoint(parsedProt, jwe.header, jwe.unprotected)) {
        throw new JWEInvalid('JWE Protected, JWE Unprotected Header, and JWE Per-Recipient Unprotected Header Parameter names must be disjoint');
    }
    const joseHeader = {
        ...parsedProt,
        ...jwe.header,
        ...jwe.unprotected,
    };
    validateCrit(JWEInvalid, new Map(), options?.crit, parsedProt, joseHeader);
    if (joseHeader.zip !== undefined) {
        throw new JOSENotSupported('JWE "zip" (Compression Algorithm) Header Parameter is not supported.');
    }
    const { alg, enc } = joseHeader;
    if (typeof alg !== 'string' || !alg) {
        throw new JWEInvalid('missing JWE Algorithm (alg) in JWE Header');
    }
    if (typeof enc !== 'string' || !enc) {
        throw new JWEInvalid('missing JWE Encryption Algorithm (enc) in JWE Header');
    }
    const keyManagementAlgorithms = options && validateAlgorithms('keyManagementAlgorithms', options.keyManagementAlgorithms);
    const contentEncryptionAlgorithms = options &&
        validateAlgorithms('contentEncryptionAlgorithms', options.contentEncryptionAlgorithms);
    if ((keyManagementAlgorithms && !keyManagementAlgorithms.has(alg)) ||
        (!keyManagementAlgorithms && alg.startsWith('PBES2'))) {
        throw new JOSEAlgNotAllowed('"alg" (Algorithm) Header Parameter value not allowed');
    }
    if (contentEncryptionAlgorithms && !contentEncryptionAlgorithms.has(enc)) {
        throw new JOSEAlgNotAllowed('"enc" (Encryption Algorithm) Header Parameter value not allowed');
    }
    let encryptedKey;
    if (jwe.encrypted_key !== undefined) {
        try {
            encryptedKey = decode$1(jwe.encrypted_key);
        }
        catch {
            throw new JWEInvalid('Failed to base64url decode the encrypted_key');
        }
    }
    let resolvedKey = false;
    if (typeof key === 'function') {
        key = await key(parsedProt, jwe);
        resolvedKey = true;
    }
    let cek;
    try {
        cek = await decryptKeyManagement(alg, key, encryptedKey, joseHeader, options);
    }
    catch (err) {
        if (err instanceof TypeError || err instanceof JWEInvalid || err instanceof JOSENotSupported) {
            throw err;
        }
        cek = generateCek(enc);
    }
    let iv;
    let tag;
    if (jwe.iv !== undefined) {
        try {
            iv = decode$1(jwe.iv);
        }
        catch {
            throw new JWEInvalid('Failed to base64url decode the iv');
        }
    }
    if (jwe.tag !== undefined) {
        try {
            tag = decode$1(jwe.tag);
        }
        catch {
            throw new JWEInvalid('Failed to base64url decode the tag');
        }
    }
    const protectedHeader = encoder.encode(jwe.protected ?? '');
    let additionalData;
    if (jwe.aad !== undefined) {
        additionalData = concat(protectedHeader, encoder.encode('.'), encoder.encode(jwe.aad));
    }
    else {
        additionalData = protectedHeader;
    }
    let ciphertext;
    try {
        ciphertext = decode$1(jwe.ciphertext);
    }
    catch {
        throw new JWEInvalid('Failed to base64url decode the ciphertext');
    }
    const plaintext = await decrypt$2(enc, cek, ciphertext, iv, tag, additionalData);
    const result = { plaintext };
    if (jwe.protected !== undefined) {
        result.protectedHeader = parsedProt;
    }
    if (jwe.aad !== undefined) {
        try {
            result.additionalAuthenticatedData = decode$1(jwe.aad);
        }
        catch {
            throw new JWEInvalid('Failed to base64url decode the aad');
        }
    }
    if (jwe.unprotected !== undefined) {
        result.sharedUnprotectedHeader = jwe.unprotected;
    }
    if (jwe.header !== undefined) {
        result.unprotectedHeader = jwe.header;
    }
    if (resolvedKey) {
        return { ...result, key };
    }
    return result;
}

async function compactDecrypt(jwe, key, options) {
    if (jwe instanceof Uint8Array) {
        jwe = decoder.decode(jwe);
    }
    if (typeof jwe !== 'string') {
        throw new JWEInvalid('Compact JWE must be a string or Uint8Array');
    }
    const { 0: protectedHeader, 1: encryptedKey, 2: iv, 3: ciphertext, 4: tag, length, } = jwe.split('.');
    if (length !== 5) {
        throw new JWEInvalid('Invalid Compact JWE');
    }
    const decrypted = await flattenedDecrypt({
        ciphertext,
        iv: iv || undefined,
        protected: protectedHeader,
        tag: tag || undefined,
        encrypted_key: encryptedKey || undefined,
    }, key, options);
    const result = { plaintext: decrypted.plaintext, protectedHeader: decrypted.protectedHeader };
    if (typeof key === 'function') {
        return { ...result, key: decrypted.key };
    }
    return result;
}

async function generalDecrypt(jwe, key, options) {
    if (!isObject(jwe)) {
        throw new JWEInvalid('General JWE must be an object');
    }
    if (!Array.isArray(jwe.recipients) || !jwe.recipients.every(isObject)) {
        throw new JWEInvalid('JWE Recipients missing or incorrect type');
    }
    if (!jwe.recipients.length) {
        throw new JWEInvalid('JWE Recipients has no members');
    }
    for (const recipient of jwe.recipients) {
        try {
            return await flattenedDecrypt({
                aad: jwe.aad,
                ciphertext: jwe.ciphertext,
                encrypted_key: recipient.encrypted_key,
                header: recipient.header,
                iv: jwe.iv,
                protected: jwe.protected,
                tag: jwe.tag,
                unprotected: jwe.unprotected,
            }, key, options);
        }
        catch {
        }
    }
    throw new JWEDecryptionFailed();
}

const keyToJWK = async (key) => {
    if (key instanceof Uint8Array) {
        return {
            kty: 'oct',
            k: encode$1(key),
        };
    }
    if (!isCryptoKey(key)) {
        throw new TypeError(invalidKeyInput(key, ...types, 'Uint8Array'));
    }
    if (!key.extractable) {
        throw new TypeError('non-extractable CryptoKey cannot be exported as a JWK');
    }
    const { ext, key_ops, alg, use, ...jwk } = await crypto$1.subtle.exportKey('jwk', key);
    return jwk;
};
var keyToJWK$1 = keyToJWK;

async function exportJWK(key) {
    return keyToJWK$1(key);
}

async function encryptKeyManagement(alg, enc, key, providedCek, providedParameters = {}) {
    let encryptedKey;
    let parameters;
    let cek;
    checkKeyType(alg, key, 'encrypt');
    switch (alg) {
        case 'dir': {
            cek = key;
            break;
        }
        case 'ECDH-ES':
        case 'ECDH-ES+A128KW':
        case 'ECDH-ES+A192KW':
        case 'ECDH-ES+A256KW': {
            if (!ecdhAllowed(key)) {
                throw new JOSENotSupported('ECDH with the provided key is not allowed or not supported by your javascript runtime');
            }
            const { apu, apv } = providedParameters;
            let { epk: ephemeralKey } = providedParameters;
            ephemeralKey || (ephemeralKey = (await generateEpk(key)).privateKey);
            const { x, y, crv, kty } = await exportJWK(ephemeralKey);
            const sharedSecret = await deriveKey$1(key, ephemeralKey, alg === 'ECDH-ES' ? enc : alg, alg === 'ECDH-ES' ? bitLength(enc) : parseInt(alg.slice(-5, -2), 10), apu, apv);
            parameters = { epk: { x, crv, kty } };
            if (kty === 'EC')
                parameters.epk.y = y;
            if (apu)
                parameters.apu = encode$1(apu);
            if (apv)
                parameters.apv = encode$1(apv);
            if (alg === 'ECDH-ES') {
                cek = sharedSecret;
                break;
            }
            cek = providedCek || generateCek(enc);
            const kwAlg = alg.slice(-6);
            encryptedKey = await wrap$1(kwAlg, sharedSecret, cek);
            break;
        }
        case 'RSA1_5':
        case 'RSA-OAEP':
        case 'RSA-OAEP-256':
        case 'RSA-OAEP-384':
        case 'RSA-OAEP-512': {
            cek = providedCek || generateCek(enc);
            encryptedKey = await encrypt$1(alg, key, cek);
            break;
        }
        case 'PBES2-HS256+A128KW':
        case 'PBES2-HS384+A192KW':
        case 'PBES2-HS512+A256KW': {
            cek = providedCek || generateCek(enc);
            const { p2c, p2s } = providedParameters;
            ({ encryptedKey, ...parameters } = await encrypt$2(alg, key, cek, p2c, p2s));
            break;
        }
        case 'A128KW':
        case 'A192KW':
        case 'A256KW': {
            cek = providedCek || generateCek(enc);
            encryptedKey = await wrap$1(alg, key, cek);
            break;
        }
        case 'A128GCMKW':
        case 'A192GCMKW':
        case 'A256GCMKW': {
            cek = providedCek || generateCek(enc);
            const { iv } = providedParameters;
            ({ encryptedKey, ...parameters } = await wrap(alg, key, cek, iv));
            break;
        }
        default: {
            throw new JOSENotSupported('Invalid or unsupported "alg" (JWE Algorithm) header value');
        }
    }
    return { cek, encryptedKey, parameters };
}

const unprotected = Symbol();
class FlattenedEncrypt {
    constructor(plaintext) {
        if (!(plaintext instanceof Uint8Array)) {
            throw new TypeError('plaintext must be an instance of Uint8Array');
        }
        this._plaintext = plaintext;
    }
    setKeyManagementParameters(parameters) {
        if (this._keyManagementParameters) {
            throw new TypeError('setKeyManagementParameters can only be called once');
        }
        this._keyManagementParameters = parameters;
        return this;
    }
    setProtectedHeader(protectedHeader) {
        if (this._protectedHeader) {
            throw new TypeError('setProtectedHeader can only be called once');
        }
        this._protectedHeader = protectedHeader;
        return this;
    }
    setSharedUnprotectedHeader(sharedUnprotectedHeader) {
        if (this._sharedUnprotectedHeader) {
            throw new TypeError('setSharedUnprotectedHeader can only be called once');
        }
        this._sharedUnprotectedHeader = sharedUnprotectedHeader;
        return this;
    }
    setUnprotectedHeader(unprotectedHeader) {
        if (this._unprotectedHeader) {
            throw new TypeError('setUnprotectedHeader can only be called once');
        }
        this._unprotectedHeader = unprotectedHeader;
        return this;
    }
    setAdditionalAuthenticatedData(aad) {
        this._aad = aad;
        return this;
    }
    setContentEncryptionKey(cek) {
        if (this._cek) {
            throw new TypeError('setContentEncryptionKey can only be called once');
        }
        this._cek = cek;
        return this;
    }
    setInitializationVector(iv) {
        if (this._iv) {
            throw new TypeError('setInitializationVector can only be called once');
        }
        this._iv = iv;
        return this;
    }
    async encrypt(key, options) {
        if (!this._protectedHeader && !this._unprotectedHeader && !this._sharedUnprotectedHeader) {
            throw new JWEInvalid('either setProtectedHeader, setUnprotectedHeader, or sharedUnprotectedHeader must be called before #encrypt()');
        }
        if (!isDisjoint(this._protectedHeader, this._unprotectedHeader, this._sharedUnprotectedHeader)) {
            throw new JWEInvalid('JWE Protected, JWE Shared Unprotected and JWE Per-Recipient Header Parameter names must be disjoint');
        }
        const joseHeader = {
            ...this._protectedHeader,
            ...this._unprotectedHeader,
            ...this._sharedUnprotectedHeader,
        };
        validateCrit(JWEInvalid, new Map(), options?.crit, this._protectedHeader, joseHeader);
        if (joseHeader.zip !== undefined) {
            throw new JOSENotSupported('JWE "zip" (Compression Algorithm) Header Parameter is not supported.');
        }
        const { alg, enc } = joseHeader;
        if (typeof alg !== 'string' || !alg) {
            throw new JWEInvalid('JWE "alg" (Algorithm) Header Parameter missing or invalid');
        }
        if (typeof enc !== 'string' || !enc) {
            throw new JWEInvalid('JWE "enc" (Encryption Algorithm) Header Parameter missing or invalid');
        }
        let encryptedKey;
        if (this._cek && (alg === 'dir' || alg === 'ECDH-ES')) {
            throw new TypeError(`setContentEncryptionKey cannot be called with JWE "alg" (Algorithm) Header ${alg}`);
        }
        let cek;
        {
            let parameters;
            ({ cek, encryptedKey, parameters } = await encryptKeyManagement(alg, enc, key, this._cek, this._keyManagementParameters));
            if (parameters) {
                if (options && unprotected in options) {
                    if (!this._unprotectedHeader) {
                        this.setUnprotectedHeader(parameters);
                    }
                    else {
                        this._unprotectedHeader = { ...this._unprotectedHeader, ...parameters };
                    }
                }
                else {
                    if (!this._protectedHeader) {
                        this.setProtectedHeader(parameters);
                    }
                    else {
                        this._protectedHeader = { ...this._protectedHeader, ...parameters };
                    }
                }
            }
        }
        let additionalData;
        let protectedHeader;
        let aadMember;
        if (this._protectedHeader) {
            protectedHeader = encoder.encode(encode$1(JSON.stringify(this._protectedHeader)));
        }
        else {
            protectedHeader = encoder.encode('');
        }
        if (this._aad) {
            aadMember = encode$1(this._aad);
            additionalData = concat(protectedHeader, encoder.encode('.'), encoder.encode(aadMember));
        }
        else {
            additionalData = protectedHeader;
        }
        const { ciphertext, tag, iv } = await encrypt(enc, this._plaintext, cek, this._iv, additionalData);
        const jwe = {
            ciphertext: encode$1(ciphertext),
        };
        if (iv) {
            jwe.iv = encode$1(iv);
        }
        if (tag) {
            jwe.tag = encode$1(tag);
        }
        if (encryptedKey) {
            jwe.encrypted_key = encode$1(encryptedKey);
        }
        if (aadMember) {
            jwe.aad = aadMember;
        }
        if (this._protectedHeader) {
            jwe.protected = decoder.decode(protectedHeader);
        }
        if (this._sharedUnprotectedHeader) {
            jwe.unprotected = this._sharedUnprotectedHeader;
        }
        if (this._unprotectedHeader) {
            jwe.header = this._unprotectedHeader;
        }
        return jwe;
    }
}

class IndividualRecipient {
    constructor(enc, key, options) {
        this.parent = enc;
        this.key = key;
        this.options = options;
    }
    setUnprotectedHeader(unprotectedHeader) {
        if (this.unprotectedHeader) {
            throw new TypeError('setUnprotectedHeader can only be called once');
        }
        this.unprotectedHeader = unprotectedHeader;
        return this;
    }
    addRecipient(...args) {
        return this.parent.addRecipient(...args);
    }
    encrypt(...args) {
        return this.parent.encrypt(...args);
    }
    done() {
        return this.parent;
    }
}
class GeneralEncrypt {
    constructor(plaintext) {
        this._recipients = [];
        this._plaintext = plaintext;
    }
    addRecipient(key, options) {
        const recipient = new IndividualRecipient(this, key, { crit: options?.crit });
        this._recipients.push(recipient);
        return recipient;
    }
    setProtectedHeader(protectedHeader) {
        if (this._protectedHeader) {
            throw new TypeError('setProtectedHeader can only be called once');
        }
        this._protectedHeader = protectedHeader;
        return this;
    }
    setSharedUnprotectedHeader(sharedUnprotectedHeader) {
        if (this._unprotectedHeader) {
            throw new TypeError('setSharedUnprotectedHeader can only be called once');
        }
        this._unprotectedHeader = sharedUnprotectedHeader;
        return this;
    }
    setAdditionalAuthenticatedData(aad) {
        this._aad = aad;
        return this;
    }
    async encrypt() {
        if (!this._recipients.length) {
            throw new JWEInvalid('at least one recipient must be added');
        }
        if (this._recipients.length === 1) {
            const [recipient] = this._recipients;
            const flattened = await new FlattenedEncrypt(this._plaintext)
                .setAdditionalAuthenticatedData(this._aad)
                .setProtectedHeader(this._protectedHeader)
                .setSharedUnprotectedHeader(this._unprotectedHeader)
                .setUnprotectedHeader(recipient.unprotectedHeader)
                .encrypt(recipient.key, { ...recipient.options });
            const jwe = {
                ciphertext: flattened.ciphertext,
                iv: flattened.iv,
                recipients: [{}],
                tag: flattened.tag,
            };
            if (flattened.aad)
                jwe.aad = flattened.aad;
            if (flattened.protected)
                jwe.protected = flattened.protected;
            if (flattened.unprotected)
                jwe.unprotected = flattened.unprotected;
            if (flattened.encrypted_key)
                jwe.recipients[0].encrypted_key = flattened.encrypted_key;
            if (flattened.header)
                jwe.recipients[0].header = flattened.header;
            return jwe;
        }
        let enc;
        for (let i = 0; i < this._recipients.length; i++) {
            const recipient = this._recipients[i];
            if (!isDisjoint(this._protectedHeader, this._unprotectedHeader, recipient.unprotectedHeader)) {
                throw new JWEInvalid('JWE Protected, JWE Shared Unprotected and JWE Per-Recipient Header Parameter names must be disjoint');
            }
            const joseHeader = {
                ...this._protectedHeader,
                ...this._unprotectedHeader,
                ...recipient.unprotectedHeader,
            };
            const { alg } = joseHeader;
            if (typeof alg !== 'string' || !alg) {
                throw new JWEInvalid('JWE "alg" (Algorithm) Header Parameter missing or invalid');
            }
            if (alg === 'dir' || alg === 'ECDH-ES') {
                throw new JWEInvalid('"dir" and "ECDH-ES" alg may only be used with a single recipient');
            }
            if (typeof joseHeader.enc !== 'string' || !joseHeader.enc) {
                throw new JWEInvalid('JWE "enc" (Encryption Algorithm) Header Parameter missing or invalid');
            }
            if (!enc) {
                enc = joseHeader.enc;
            }
            else if (enc !== joseHeader.enc) {
                throw new JWEInvalid('JWE "enc" (Encryption Algorithm) Header Parameter must be the same for all recipients');
            }
            validateCrit(JWEInvalid, new Map(), recipient.options.crit, this._protectedHeader, joseHeader);
            if (joseHeader.zip !== undefined) {
                throw new JOSENotSupported('JWE "zip" (Compression Algorithm) Header Parameter is not supported.');
            }
        }
        const cek = generateCek(enc);
        const jwe = {
            ciphertext: '',
            iv: '',
            recipients: [],
            tag: '',
        };
        for (let i = 0; i < this._recipients.length; i++) {
            const recipient = this._recipients[i];
            const target = {};
            jwe.recipients.push(target);
            const joseHeader = {
                ...this._protectedHeader,
                ...this._unprotectedHeader,
                ...recipient.unprotectedHeader,
            };
            const p2c = joseHeader.alg.startsWith('PBES2') ? 2048 + i : undefined;
            if (i === 0) {
                const flattened = await new FlattenedEncrypt(this._plaintext)
                    .setAdditionalAuthenticatedData(this._aad)
                    .setContentEncryptionKey(cek)
                    .setProtectedHeader(this._protectedHeader)
                    .setSharedUnprotectedHeader(this._unprotectedHeader)
                    .setUnprotectedHeader(recipient.unprotectedHeader)
                    .setKeyManagementParameters({ p2c })
                    .encrypt(recipient.key, {
                    ...recipient.options,
                    [unprotected]: true,
                });
                jwe.ciphertext = flattened.ciphertext;
                jwe.iv = flattened.iv;
                jwe.tag = flattened.tag;
                if (flattened.aad)
                    jwe.aad = flattened.aad;
                if (flattened.protected)
                    jwe.protected = flattened.protected;
                if (flattened.unprotected)
                    jwe.unprotected = flattened.unprotected;
                target.encrypted_key = flattened.encrypted_key;
                if (flattened.header)
                    target.header = flattened.header;
                continue;
            }
            const { encryptedKey, parameters } = await encryptKeyManagement(recipient.unprotectedHeader?.alg ||
                this._protectedHeader?.alg ||
                this._unprotectedHeader?.alg, enc, recipient.key, cek, { p2c });
            target.encrypted_key = encode$1(encryptedKey);
            if (recipient.unprotectedHeader || parameters)
                target.header = { ...recipient.unprotectedHeader, ...parameters };
        }
        return jwe;
    }
}

function subtleDsa(alg, algorithm) {
    const hash = `SHA-${alg.slice(-3)}`;
    switch (alg) {
        case 'HS256':
        case 'HS384':
        case 'HS512':
            return { hash, name: 'HMAC' };
        case 'PS256':
        case 'PS384':
        case 'PS512':
            return { hash, name: 'RSA-PSS', saltLength: alg.slice(-3) >> 3 };
        case 'RS256':
        case 'RS384':
        case 'RS512':
            return { hash, name: 'RSASSA-PKCS1-v1_5' };
        case 'ES256':
        case 'ES384':
        case 'ES512':
            return { hash, name: 'ECDSA', namedCurve: algorithm.namedCurve };
        case 'EdDSA':
            return { name: algorithm.name };
        default:
            throw new JOSENotSupported(`alg ${alg} is not supported either by JOSE or your javascript runtime`);
    }
}

function getCryptoKey(alg, key, usage) {
    if (isCryptoKey(key)) {
        checkSigCryptoKey(key, alg, usage);
        return key;
    }
    if (key instanceof Uint8Array) {
        if (!alg.startsWith('HS')) {
            throw new TypeError(invalidKeyInput(key, ...types));
        }
        return crypto$1.subtle.importKey('raw', key, { hash: `SHA-${alg.slice(-3)}`, name: 'HMAC' }, false, [usage]);
    }
    throw new TypeError(invalidKeyInput(key, ...types, 'Uint8Array'));
}

const verify = async (alg, key, signature, data) => {
    const cryptoKey = await getCryptoKey(alg, key, 'verify');
    checkKeyLength(alg, cryptoKey);
    const algorithm = subtleDsa(alg, cryptoKey.algorithm);
    try {
        return await crypto$1.subtle.verify(algorithm, cryptoKey, signature, data);
    }
    catch {
        return false;
    }
};

async function flattenedVerify(jws, key, options) {
    if (!isObject(jws)) {
        throw new JWSInvalid('Flattened JWS must be an object');
    }
    if (jws.protected === undefined && jws.header === undefined) {
        throw new JWSInvalid('Flattened JWS must have either of the "protected" or "header" members');
    }
    if (jws.protected !== undefined && typeof jws.protected !== 'string') {
        throw new JWSInvalid('JWS Protected Header incorrect type');
    }
    if (jws.payload === undefined) {
        throw new JWSInvalid('JWS Payload missing');
    }
    if (typeof jws.signature !== 'string') {
        throw new JWSInvalid('JWS Signature missing or incorrect type');
    }
    if (jws.header !== undefined && !isObject(jws.header)) {
        throw new JWSInvalid('JWS Unprotected Header incorrect type');
    }
    let parsedProt = {};
    if (jws.protected) {
        try {
            const protectedHeader = decode$1(jws.protected);
            parsedProt = JSON.parse(decoder.decode(protectedHeader));
        }
        catch {
            throw new JWSInvalid('JWS Protected Header is invalid');
        }
    }
    if (!isDisjoint(parsedProt, jws.header)) {
        throw new JWSInvalid('JWS Protected and JWS Unprotected Header Parameter names must be disjoint');
    }
    const joseHeader = {
        ...parsedProt,
        ...jws.header,
    };
    const extensions = validateCrit(JWSInvalid, new Map([['b64', true]]), options?.crit, parsedProt, joseHeader);
    let b64 = true;
    if (extensions.has('b64')) {
        b64 = parsedProt.b64;
        if (typeof b64 !== 'boolean') {
            throw new JWSInvalid('The "b64" (base64url-encode payload) Header Parameter must be a boolean');
        }
    }
    const { alg } = joseHeader;
    if (typeof alg !== 'string' || !alg) {
        throw new JWSInvalid('JWS "alg" (Algorithm) Header Parameter missing or invalid');
    }
    const algorithms = options && validateAlgorithms('algorithms', options.algorithms);
    if (algorithms && !algorithms.has(alg)) {
        throw new JOSEAlgNotAllowed('"alg" (Algorithm) Header Parameter value not allowed');
    }
    if (b64) {
        if (typeof jws.payload !== 'string') {
            throw new JWSInvalid('JWS Payload must be a string');
        }
    }
    else if (typeof jws.payload !== 'string' && !(jws.payload instanceof Uint8Array)) {
        throw new JWSInvalid('JWS Payload must be a string or an Uint8Array instance');
    }
    let resolvedKey = false;
    if (typeof key === 'function') {
        key = await key(parsedProt, jws);
        resolvedKey = true;
    }
    checkKeyType(alg, key, 'verify');
    const data = concat(encoder.encode(jws.protected ?? ''), encoder.encode('.'), typeof jws.payload === 'string' ? encoder.encode(jws.payload) : jws.payload);
    let signature;
    try {
        signature = decode$1(jws.signature);
    }
    catch {
        throw new JWSInvalid('Failed to base64url decode the signature');
    }
    const verified = await verify(alg, key, signature, data);
    if (!verified) {
        throw new JWSSignatureVerificationFailed();
    }
    let payload;
    if (b64) {
        try {
            payload = decode$1(jws.payload);
        }
        catch {
            throw new JWSInvalid('Failed to base64url decode the payload');
        }
    }
    else if (typeof jws.payload === 'string') {
        payload = encoder.encode(jws.payload);
    }
    else {
        payload = jws.payload;
    }
    const result = { payload };
    if (jws.protected !== undefined) {
        result.protectedHeader = parsedProt;
    }
    if (jws.header !== undefined) {
        result.unprotectedHeader = jws.header;
    }
    if (resolvedKey) {
        return { ...result, key };
    }
    return result;
}

async function compactVerify(jws, key, options) {
    if (jws instanceof Uint8Array) {
        jws = decoder.decode(jws);
    }
    if (typeof jws !== 'string') {
        throw new JWSInvalid('Compact JWS must be a string or Uint8Array');
    }
    const { 0: protectedHeader, 1: payload, 2: signature, length } = jws.split('.');
    if (length !== 3) {
        throw new JWSInvalid('Invalid Compact JWS');
    }
    const verified = await flattenedVerify({ payload, protected: protectedHeader, signature }, key, options);
    const result = { payload: verified.payload, protectedHeader: verified.protectedHeader };
    if (typeof key === 'function') {
        return { ...result, key: verified.key };
    }
    return result;
}

async function generalVerify(jws, key, options) {
    if (!isObject(jws)) {
        throw new JWSInvalid('General JWS must be an object');
    }
    if (!Array.isArray(jws.signatures) || !jws.signatures.every(isObject)) {
        throw new JWSInvalid('JWS Signatures missing or incorrect type');
    }
    for (const signature of jws.signatures) {
        try {
            return await flattenedVerify({
                header: signature.header,
                payload: jws.payload,
                protected: signature.protected,
                signature: signature.signature,
            }, key, options);
        }
        catch {
        }
    }
    throw new JWSSignatureVerificationFailed();
}

class CompactEncrypt {
    constructor(plaintext) {
        this._flattened = new FlattenedEncrypt(plaintext);
    }
    setContentEncryptionKey(cek) {
        this._flattened.setContentEncryptionKey(cek);
        return this;
    }
    setInitializationVector(iv) {
        this._flattened.setInitializationVector(iv);
        return this;
    }
    setProtectedHeader(protectedHeader) {
        this._flattened.setProtectedHeader(protectedHeader);
        return this;
    }
    setKeyManagementParameters(parameters) {
        this._flattened.setKeyManagementParameters(parameters);
        return this;
    }
    async encrypt(key, options) {
        const jwe = await this._flattened.encrypt(key, options);
        return [jwe.protected, jwe.encrypted_key, jwe.iv, jwe.ciphertext, jwe.tag].join('.');
    }
}

const sign = async (alg, key, data) => {
    const cryptoKey = await getCryptoKey(alg, key, 'sign');
    checkKeyLength(alg, cryptoKey);
    const signature = await crypto$1.subtle.sign(subtleDsa(alg, cryptoKey.algorithm), cryptoKey, data);
    return new Uint8Array(signature);
};

class FlattenedSign {
    constructor(payload) {
        if (!(payload instanceof Uint8Array)) {
            throw new TypeError('payload must be an instance of Uint8Array');
        }
        this._payload = payload;
    }
    setProtectedHeader(protectedHeader) {
        if (this._protectedHeader) {
            throw new TypeError('setProtectedHeader can only be called once');
        }
        this._protectedHeader = protectedHeader;
        return this;
    }
    setUnprotectedHeader(unprotectedHeader) {
        if (this._unprotectedHeader) {
            throw new TypeError('setUnprotectedHeader can only be called once');
        }
        this._unprotectedHeader = unprotectedHeader;
        return this;
    }
    async sign(key, options) {
        if (!this._protectedHeader && !this._unprotectedHeader) {
            throw new JWSInvalid('either setProtectedHeader or setUnprotectedHeader must be called before #sign()');
        }
        if (!isDisjoint(this._protectedHeader, this._unprotectedHeader)) {
            throw new JWSInvalid('JWS Protected and JWS Unprotected Header Parameter names must be disjoint');
        }
        const joseHeader = {
            ...this._protectedHeader,
            ...this._unprotectedHeader,
        };
        const extensions = validateCrit(JWSInvalid, new Map([['b64', true]]), options?.crit, this._protectedHeader, joseHeader);
        let b64 = true;
        if (extensions.has('b64')) {
            b64 = this._protectedHeader.b64;
            if (typeof b64 !== 'boolean') {
                throw new JWSInvalid('The "b64" (base64url-encode payload) Header Parameter must be a boolean');
            }
        }
        const { alg } = joseHeader;
        if (typeof alg !== 'string' || !alg) {
            throw new JWSInvalid('JWS "alg" (Algorithm) Header Parameter missing or invalid');
        }
        checkKeyType(alg, key, 'sign');
        let payload = this._payload;
        if (b64) {
            payload = encoder.encode(encode$1(payload));
        }
        let protectedHeader;
        if (this._protectedHeader) {
            protectedHeader = encoder.encode(encode$1(JSON.stringify(this._protectedHeader)));
        }
        else {
            protectedHeader = encoder.encode('');
        }
        const data = concat(protectedHeader, encoder.encode('.'), payload);
        const signature = await sign(alg, key, data);
        const jws = {
            signature: encode$1(signature),
            payload: '',
        };
        if (b64) {
            jws.payload = decoder.decode(payload);
        }
        if (this._unprotectedHeader) {
            jws.header = this._unprotectedHeader;
        }
        if (this._protectedHeader) {
            jws.protected = decoder.decode(protectedHeader);
        }
        return jws;
    }
}

class CompactSign {
    constructor(payload) {
        this._flattened = new FlattenedSign(payload);
    }
    setProtectedHeader(protectedHeader) {
        this._flattened.setProtectedHeader(protectedHeader);
        return this;
    }
    async sign(key, options) {
        const jws = await this._flattened.sign(key, options);
        if (jws.payload === undefined) {
            throw new TypeError('use the flattened module for creating JWS with b64: false');
        }
        return `${jws.protected}.${jws.payload}.${jws.signature}`;
    }
}

class IndividualSignature {
    constructor(sig, key, options) {
        this.parent = sig;
        this.key = key;
        this.options = options;
    }
    setProtectedHeader(protectedHeader) {
        if (this.protectedHeader) {
            throw new TypeError('setProtectedHeader can only be called once');
        }
        this.protectedHeader = protectedHeader;
        return this;
    }
    setUnprotectedHeader(unprotectedHeader) {
        if (this.unprotectedHeader) {
            throw new TypeError('setUnprotectedHeader can only be called once');
        }
        this.unprotectedHeader = unprotectedHeader;
        return this;
    }
    addSignature(...args) {
        return this.parent.addSignature(...args);
    }
    sign(...args) {
        return this.parent.sign(...args);
    }
    done() {
        return this.parent;
    }
}
class GeneralSign {
    constructor(payload) {
        this._signatures = [];
        this._payload = payload;
    }
    addSignature(key, options) {
        const signature = new IndividualSignature(this, key, options);
        this._signatures.push(signature);
        return signature;
    }
    async sign() {
        if (!this._signatures.length) {
            throw new JWSInvalid('at least one signature must be added');
        }
        const jws = {
            signatures: [],
            payload: '',
        };
        for (let i = 0; i < this._signatures.length; i++) {
            const signature = this._signatures[i];
            const flattened = new FlattenedSign(this._payload);
            flattened.setProtectedHeader(signature.protectedHeader);
            flattened.setUnprotectedHeader(signature.unprotectedHeader);
            const { payload, ...rest } = await flattened.sign(signature.key, signature.options);
            if (i === 0) {
                jws.payload = payload;
            }
            else if (jws.payload !== payload) {
                throw new JWSInvalid('inconsistent use of JWS Unencoded Payload (RFC7797)');
            }
            jws.signatures.push(rest);
        }
        return jws;
    }
}

const encode = encode$1;
const decode = decode$1;

function decodeProtectedHeader(token) {
    let protectedB64u;
    if (typeof token === 'string') {
        const parts = token.split('.');
        if (parts.length === 3 || parts.length === 5) {
            [protectedB64u] = parts;
        }
    }
    else if (typeof token === 'object' && token) {
        if ('protected' in token) {
            protectedB64u = token.protected;
        }
        else {
            throw new TypeError('Token does not contain a Protected Header');
        }
    }
    try {
        if (typeof protectedB64u !== 'string' || !protectedB64u) {
            throw new Error();
        }
        const result = JSON.parse(decoder.decode(decode(protectedB64u)));
        if (!isObject(result)) {
            throw new Error();
        }
        return result;
    }
    catch {
        throw new TypeError('Invalid Token or Protected Header formatting');
    }
}

async function generateSecret$1(alg, options) {
    let length;
    let algorithm;
    let keyUsages;
    switch (alg) {
        case 'HS256':
        case 'HS384':
        case 'HS512':
            length = parseInt(alg.slice(-3), 10);
            algorithm = { name: 'HMAC', hash: `SHA-${length}`, length };
            keyUsages = ['sign', 'verify'];
            break;
        case 'A128CBC-HS256':
        case 'A192CBC-HS384':
        case 'A256CBC-HS512':
            length = parseInt(alg.slice(-3), 10);
            return random(new Uint8Array(length >> 3));
        case 'A128KW':
        case 'A192KW':
        case 'A256KW':
            length = parseInt(alg.slice(1, 4), 10);
            algorithm = { name: 'AES-KW', length };
            keyUsages = ['wrapKey', 'unwrapKey'];
            break;
        case 'A128GCMKW':
        case 'A192GCMKW':
        case 'A256GCMKW':
        case 'A128GCM':
        case 'A192GCM':
        case 'A256GCM':
            length = parseInt(alg.slice(1, 4), 10);
            algorithm = { name: 'AES-GCM', length };
            keyUsages = ['encrypt', 'decrypt'];
            break;
        default:
            throw new JOSENotSupported('Invalid or unsupported JWK "alg" (Algorithm) Parameter value');
    }
    return crypto$1.subtle.generateKey(algorithm, options?.extractable ?? false, keyUsages);
}
function getModulusLengthOption(options) {
    const modulusLength = options?.modulusLength ?? 2048;
    if (typeof modulusLength !== 'number' || modulusLength < 2048) {
        throw new JOSENotSupported('Invalid or unsupported modulusLength option provided, 2048 bits or larger keys must be used');
    }
    return modulusLength;
}
async function generateKeyPair$1(alg, options) {
    let algorithm;
    let keyUsages;
    switch (alg) {
        case 'PS256':
        case 'PS384':
        case 'PS512':
            algorithm = {
                name: 'RSA-PSS',
                hash: `SHA-${alg.slice(-3)}`,
                publicExponent: new Uint8Array([0x01, 0x00, 0x01]),
                modulusLength: getModulusLengthOption(options),
            };
            keyUsages = ['sign', 'verify'];
            break;
        case 'RS256':
        case 'RS384':
        case 'RS512':
            algorithm = {
                name: 'RSASSA-PKCS1-v1_5',
                hash: `SHA-${alg.slice(-3)}`,
                publicExponent: new Uint8Array([0x01, 0x00, 0x01]),
                modulusLength: getModulusLengthOption(options),
            };
            keyUsages = ['sign', 'verify'];
            break;
        case 'RSA-OAEP':
        case 'RSA-OAEP-256':
        case 'RSA-OAEP-384':
        case 'RSA-OAEP-512':
            algorithm = {
                name: 'RSA-OAEP',
                hash: `SHA-${parseInt(alg.slice(-3), 10) || 1}`,
                publicExponent: new Uint8Array([0x01, 0x00, 0x01]),
                modulusLength: getModulusLengthOption(options),
            };
            keyUsages = ['decrypt', 'unwrapKey', 'encrypt', 'wrapKey'];
            break;
        case 'ES256':
            algorithm = { name: 'ECDSA', namedCurve: 'P-256' };
            keyUsages = ['sign', 'verify'];
            break;
        case 'ES384':
            algorithm = { name: 'ECDSA', namedCurve: 'P-384' };
            keyUsages = ['sign', 'verify'];
            break;
        case 'ES512':
            algorithm = { name: 'ECDSA', namedCurve: 'P-521' };
            keyUsages = ['sign', 'verify'];
            break;
        case 'EdDSA': {
            keyUsages = ['sign', 'verify'];
            const crv = options?.crv ?? 'Ed25519';
            switch (crv) {
                case 'Ed25519':
                case 'Ed448':
                    algorithm = { name: crv };
                    break;
                default:
                    throw new JOSENotSupported('Invalid or unsupported crv option provided');
            }
            break;
        }
        case 'ECDH-ES':
        case 'ECDH-ES+A128KW':
        case 'ECDH-ES+A192KW':
        case 'ECDH-ES+A256KW': {
            keyUsages = ['deriveKey', 'deriveBits'];
            const crv = options?.crv ?? 'P-256';
            switch (crv) {
                case 'P-256':
                case 'P-384':
                case 'P-521': {
                    algorithm = { name: 'ECDH', namedCurve: crv };
                    break;
                }
                case 'X25519':
                case 'X448':
                    algorithm = { name: crv };
                    break;
                default:
                    throw new JOSENotSupported('Invalid or unsupported crv option provided, supported values are P-256, P-384, P-521, X25519, and X448');
            }
            break;
        }
        default:
            throw new JOSENotSupported('Invalid or unsupported JWK "alg" (Algorithm) Parameter value');
    }
    return (crypto$1.subtle.generateKey(algorithm, options?.extractable ?? false, keyUsages));
}

async function generateKeyPair(alg, options) {
    return generateKeyPair$1(alg, options);
}

async function generateSecret(alg, options) {
    return generateSecret$1(alg, options);
}

// One consistent algorithm for each family.
// https://datatracker.ietf.org/doc/html/rfc7518

const signingName = 'ECDSA';
const signingCurve = 'P-384';
const signingAlgorithm = 'ES384';

const encryptingName = 'RSA-OAEP';
const hashLength = 256;
const hashName = 'SHA-256';
const modulusLength = 4096; // panva JOSE library default is 2048
const encryptingAlgorithm = 'RSA-OAEP-256';

const symmetricName = 'AES-GCM';
const symmetricAlgorithm = 'A256GCM';
const symmetricWrap = 'A256GCMKW';
const secretAlgorithm = 'PBES2-HS512+A256KW';

const extractable = true;  // always wrapped

function digest(hashName, buffer) {
  return crypto.subtle.digest(hashName, buffer);
}

function exportRawKey(key) {
  return crypto.subtle.exportKey('raw', key);
}

function importRawKey(arrayBuffer) {
  const algorithm = {name: signingName, namedCurve: signingCurve};
  return crypto.subtle.importKey('raw', arrayBuffer, algorithm, extractable, ['verify']);
}

function importSecret(byteArray) {
  const algorithm = {name: symmetricName, length: hashLength};
  return crypto.subtle.importKey('raw', byteArray, algorithm, true, ['encrypt', 'decrypt'])
}

const Krypto = {
  // An inheritable singleton for compact JOSE operations.
  // See https://kilroy-code.github.io/distributed-security/docs/implementation.html#wrapping-subtlekrypto
  decodeProtectedHeader: decodeProtectedHeader,
  isEmptyJWSPayload(compactJWS) { // arg is a string
    return !compactJWS.split('.')[1];
  },

  // The cty can be specified in encrypt/sign, but defaults to a good guess.
  // The cty can be specified in decrypt/verify, but defaults to what is specified in the protected header.
  inputBuffer(data, header) { // Answers a buffer view of data and, if necessary to convert, bashes cty of header.
    if (ArrayBuffer.isView(data) && !header.cty) return data;
    let givenCty = header.cty || '';
    if (givenCty.includes('text') || ('string' === typeof data)) {
      header.cty = givenCty || 'text/plain';
    } else {
      header.cty = givenCty || 'json'; // JWS recommends leaving off the leading 'application/'.
      data = JSON.stringify(data); // Note that new String("something") will pass this way.
    }
    return new TextEncoder().encode(data);
  },
  recoverDataFromContentType(result, {cty = result?.protectedHeader?.cty} = {}) {
    // Examines result?.protectedHeader and bashes in result.text or result.json if appropriate, returning result.
    if (result && !Object.prototype.hasOwnProperty.call(result, 'payload')) result.payload = result.plaintext;  // because JOSE uses plaintext for decrypt and payload for sign.
    if (!cty || !result?.payload) return result; // either no cty or no result
    result.text = new TextDecoder().decode(result.payload);
    if (cty.includes('json')) result.json = JSON.parse(result.text);
    return result;
  },

  // Sign/Verify
  generateSigningKey() { // Promise {privateKey, publicKey} in our standard signing algorithm.
    return generateKeyPair(signingAlgorithm, {extractable});
  },
  async sign(privateKey, message, headers = {}) { // Promise a compact JWS string. Accepts headers to be protected.
    let header = {alg: signingAlgorithm, ...headers},
        inputBuffer = this.inputBuffer(message, header);
    return new CompactSign(inputBuffer).setProtectedHeader(header).sign(privateKey);
  },
  async verify(publicKey, signature, options) { // Promise {payload, text, json}, where text and json are only defined when appropriate.
    let result = await compactVerify(signature, publicKey).catch(() => undefined);
    return this.recoverDataFromContentType(result, options);
  },

  // Encrypt/Decrypt
  generateEncryptingKey() { // Promise {privateKey, publicKey} in our standard encryption algorithm.
    return generateKeyPair(encryptingAlgorithm, {extractable, modulusLength});
  },
  async encrypt(key, message, headers = {}) { // Promise a compact JWE string. Accepts headers to be protected.
    let alg = this.isSymmetric(key) ? 'dir' : encryptingAlgorithm,
        header = {alg, enc: symmetricAlgorithm, ...headers},
        inputBuffer = this.inputBuffer(message, header),
        secret = this.keySecret(key);
    return  new CompactEncrypt(inputBuffer).setProtectedHeader(header).encrypt(secret);
  },
  async decrypt(key, encrypted, options) { // Promise {payload, text, json}, where text and json are only defined when appropriate.
    let secret = this.keySecret(key),
        result = await compactDecrypt(encrypted, secret);
    this.recoverDataFromContentType(result, options);
    return result;
  },
  async generateSecretKey(text) { // JOSE uses a digest for PBES, but make it recognizable as a {type: 'secret'} key.
    let buffer = new TextEncoder().encode(text),
        hash = await digest(hashName, buffer);
    return {type: 'secret', text: new Uint8Array(hash)};
  },
  generateSymmetricKey(text) { // Promise a key for symmetric encryption.
    if (text) return this.generateSecretKey(text); // PBES
    return generateSecret(symmetricAlgorithm, {extractable}); // AES
  },
  isSymmetric(key) { // Either AES or PBES, but not publicKey or privateKey.
    return key.type === 'secret';
  },
  keySecret(key) { // Return what is actually used as input in JOSE library.
    if (key.text) return key.text;
    return key;
  },

  // Export/Import
  async exportRaw(key) { // base64url for public verfication keys
    let arrayBuffer = await exportRawKey(key);
    return encode(new Uint8Array(arrayBuffer));
  },
  async importRaw(string) { // Promise the verification key from base64url
    let arrayBuffer = decode(string);
    return importRawKey(arrayBuffer);
  },
  async exportJWK(key) { // Promise JWK object, with alg included.
    let exported = await exportJWK(key),
        alg = key.algorithm; // JOSE library gives algorithm, but not alg that is needed for import.
    if (alg) { // subtle.crypto underlying keys
      if (alg.name === signingName && alg.namedCurve === signingCurve) exported.alg = signingAlgorithm;
      else if (alg.name === encryptingName && alg.hash.name === hashName) exported.alg = encryptingAlgorithm;
      else if (alg.name === symmetricName && alg.length === hashLength) exported.alg = symmetricAlgorithm;
    } else switch (exported.kty) { // JOSE on NodeJS used node:crypto keys, which do not expose the precise algorithm
      case 'EC': exported.alg = signingAlgorithm; break;
      case 'RSA': exported.alg = encryptingAlgorithm; break;
      case 'oct': exported.alg = symmetricAlgorithm; break;
    }
    return exported;
  },
  async importJWK(jwk) { // Promise a key object
    jwk = Object.assign({ext: true}, jwk); // We need the result to be be able to generate a new JWK (e.g., on changeMembership)
    let imported = await importJWK(jwk);
    if (imported instanceof Uint8Array) {
      // We depend an returning an actual key, but the JOSE library we use
      // will above produce the raw Uint8Array if the jwk is from a secret.
      imported = await importSecret(imported);
    }
    return imported;
  },

  async wrapKey(key, wrappingKey) { // Promise a JWE from the public wrappingKey
    let exported = await this.exportJWK(key);
    return this.encrypt(wrappingKey, exported);
  },
  async unwrapKey(wrappedKey, unwrappingKey) { // Promise the key unlocked by the private unwrappingKey.
    let decrypted = await this.decrypt(unwrappingKey, wrappedKey);
    return this.importJWK(decrypted.json);
  }
};
/*
Some useful JOSE recipes for playing around.
sk = await JOSE.generateKeyPair('ES384', {extractable: true})
jwt = await new JOSE.SignJWT().setSubject("foo").setProtectedHeader({alg:'ES384'}).sign(sk.privateKey)
await JOSE.jwtVerify(jwt, sk.publicKey) //.payload.sub

message = new TextEncoder().encode('some message')
jws = await new JOSE.CompactSign(message).setProtectedHeader({alg:'ES384'}).sign(sk.privateKey) // Or FlattenedSign
jws = await new JOSE.GeneralSign(message).addSignature(sk.privateKey).setProtectedHeader({alg:'ES384'}).sign()
verified = await JOSE.generalVerify(jws, sk.publicKey)
or compactVerify or flattenedVerify
new TextDecoder().decode(verified.payload)

ek = await JOSE.generateKeyPair('RSA-OAEP-256', {extractable: true})
jwe = await new JOSE.CompactEncrypt(message).setProtectedHeader({alg: 'RSA-OAEP-256', enc: 'A256GCM' }).encrypt(ek.publicKey)
or FlattenedEncrypt. For symmetric secret, specify alg:'dir'.
decrypted = await JOSE.compactDecrypt(jwe, ek.privateKey)
new TextDecoder().decode(decrypted.plaintext)
jwe = await new JOSE.GeneralEncrypt(message).setProtectedHeader({alg: 'RSA-OAEP-256', enc: 'A256GCM' }).addRecipient(ek.publicKey).encrypt() // with additional addRecipent() as needed
decrypted = await JOSE.generalDecrypt(jwe, ek.privateKey)

material = new TextEncoder().encode('secret')
jwe = await new JOSE.CompactEncrypt(message).setProtectedHeader({alg: 'PBES2-HS512+A256KW', enc: 'A256GCM' }).encrypt(material)
decrypted = await JOSE.compactDecrypt(jwe, material, {keyManagementAlgorithms: ['PBES2-HS512+A256KW'], contentEncryptionAlgorithms: ['A256GCM']})
jwe = await new JOSE.GeneralEncrypt(message).setProtectedHeader({alg: 'PBES2-HS512+A256KW', enc: 'A256GCM' }).addRecipient(material).encrypt()
jwe = await new JOSE.GeneralEncrypt(message).setProtectedHeader({enc: 'A256GCM' })
  .addRecipient(ek.publicKey).setUnprotectedHeader({kid: 'foo', alg: 'RSA-OAEP-256'})
  .addRecipient(material).setUnprotectedHeader({kid: 'secret1', alg: 'PBES2-HS512+A256KW'})
  .addRecipient(material2).setUnprotectedHeader({kid: 'secret2', alg: 'PBES2-HS512+A256KW'})
  .encrypt()
decrypted = await JOSE.generalDecrypt(jwe, ek.privateKey)
decrypted = await JOSE.generalDecrypt(jwe, material, {keyManagementAlgorithms: ['PBES2-HS512+A256KW']})
*/

function mismatch(kid, encodedKid) { // Promise a rejection.
  let message = `Key ${kid} does not match encoded ${encodedKid}.`;
  return Promise.reject(message);
}

const MultiKrypto = {
  // Extend Krypto for general (multiple key) JOSE operations.
  // See https://kilroy-code.github.io/distributed-security/docs/implementation.html#combining-keys
  
  // Our multi keys are dictionaries of name (or kid) => keyObject.
  isMultiKey(key) { // A SubtleCrypto CryptoKey is an object with a type property. Our multikeys are
    // objects with a specific type or no type property at all.
    return (key.type || 'multi') === 'multi';
  },
  keyTags(key) { // Just the kids that are for actual keys. No 'type'.
    return Object.keys(key).filter(key => key !== 'type');
  },

  // Export/Import
  async exportJWK(key) { // Promise a JWK key set if necessary, retaining the names as kid property.
    if (!this.isMultiKey(key)) return super.exportJWK(key);
    let names = this.keyTags(key),
        keys = await Promise.all(names.map(async name => {
          let jwk = await this.exportJWK(key[name]);
          jwk.kid = name;
          return jwk;
        }));
    return {keys};
  },
  async importJWK(jwk) { // Promise a single "key" object.
    // Result will be a multi-key if JWK is a key set, in which case each must include a kid property.
    if (!jwk.keys) return super.importJWK(jwk);
    let key = {}; // TODO: get type from kty or some such?
    await Promise.all(jwk.keys.map(async jwk => key[jwk.kid] = await this.importJWK(jwk)));
    return key;
  },

  // Encrypt/Decrypt
  async encrypt(key, message, headers = {}) { // Promise a JWE, in general form if appropriate.
    if (!this.isMultiKey(key)) return super.encrypt(key, message, headers);
    // key must be a dictionary mapping tags to encrypting keys.
    let baseHeader = Object.assign({enc: symmetricAlgorithm}, headers),
        inputBuffer = this.inputBuffer(message, baseHeader),
        jwe = new GeneralEncrypt(inputBuffer).setProtectedHeader(baseHeader);
    for (let tag of this.keyTags(key)) {
      let thisKey = key[tag],
          isString = 'string' === typeof thisKey,
          isSym = isString || this.isSymmetric(thisKey),
          secret = isString ? new TextEncoder().encode(thisKey) : this.keySecret(thisKey),
          alg = isString ? secretAlgorithm : (isSym ? symmetricWrap : encryptingAlgorithm);
      // The kid and alg are per/sub-key, and so cannot be signed by all, and so cannot be protected within the encryption.
      // This is ok, because the only that can happen as a result of tampering with these is that the decryption will fail,
      // which is the same result as tampering with the ciphertext or any other part of the JWE.
      jwe.addRecipient(secret).setUnprotectedHeader({kid: tag, alg});
    }
    let encrypted = await jwe.encrypt();
    return encrypted;
  },
  async decrypt(key, encrypted, options) { // Promise {payload, text, json}, where text and json are only defined when appropriate.
    if (!this.isMultiKey(key)) return super.decrypt(key, encrypted, options);
    let jwe = encrypted,
        {recipients} = jwe,
        unwrappingPromises = recipients.map(async ({header}) => {
          let {kid} = header,
              unwrappingKey = key[kid],
              options = {};
          if (!unwrappingKey) return Promise.reject('missing');
          if ('string' === typeof unwrappingKey) { // TODO: only specified if allowed by secure header?
            unwrappingKey = new TextEncoder().encode(unwrappingKey);
            options.keyManagementAlgorithms = [secretAlgorithm];
          }
          let result = await generalDecrypt(jwe, this.keySecret(unwrappingKey), options),
              encodedKid = result.unprotectedHeader.kid;
          if (encodedKid !== kid) return mismatch(kid, encodedKid);
          return result;
        });
    // Do we really want to return undefined if everything fails? Should just allow the rejection to propagate?
    return await Promise.any(unwrappingPromises).then(
      result => {
        this.recoverDataFromContentType(result, options);
        return result;
      },
      () => undefined);
  },

  // Sign/Verify
  async sign(key, message, header = {}) { // Promise JWS, in general form with kid headers if necessary.
    if (!this.isMultiKey(key)) return super.sign(key, message, header);
    let inputBuffer = this.inputBuffer(message, header),
        jws = new GeneralSign(inputBuffer);
    for (let tag of this.keyTags(key)) {
      let thisKey = key[tag],
          thisHeader = Object.assign({kid: tag, alg: signingAlgorithm}, header);
      jws.addSignature(thisKey).setProtectedHeader(thisHeader);
    }
    return jws.sign();
  },
  verifySubSignature(jws, signatureElement, multiKey, kids) {
    // Verify a single element of jws.signature using multiKey.
    // Always promises {protectedHeader, unprotectedHeader, kid}, even if verification fails,
    // where kid is the property name within multiKey that matched (either by being specified in a header
    // or by successful verification). Also includes the decoded payload IFF there is a match.
    let protectedHeader = signatureElement.protectedHeader ?? this.decodeProtectedHeader(signatureElement),
        unprotectedHeader = signatureElement.unprotectedHeader,
        kid = protectedHeader?.kid || unprotectedHeader?.kid,
        singleJWS = Object.assign({}, jws, {signatures: [signatureElement]}),
        failureResult = {protectedHeader, unprotectedHeader, kid},
        kidsToTry = kid ? [kid] : kids;
    let promise = Promise.any(kidsToTry.map(async kid => generalVerify(singleJWS, multiKey[kid]).then(result => Object.assign({kid}, result))));
    return promise.catch(() => failureResult);
  },
  async verify(key, signature, options = {}) { // Promise {payload, text, json}, where text and json are only defined when appropriate.
    // Additionally, if key is a multiKey AND signature is a general form JWS, then answer includes a signers property
    // by which caller can determine if it what they expect. The payload of each signers element is defined only that
    // signer was matched by something in key.
    
    if (!this.isMultiKey(key)) return super.verify(key, signature, options);
    if (!signature.signatures) return;

    // Comparison to panva JOSE.generalVerify.
    // JOSE takes a jws and ONE key and answers {payload, protectedHeader, unprotectedHeader} matching the one
    // jws.signature element that was verified, otherise an eror. (It tries each of the elements of the jws.signatures.)
    // It is not generally possible to know WHICH one of the jws.signatures was matched.
    // (It MAY be possible if there are unique kid elements, but that's application-dependent.)
    //
    // MultiKrypto takes a dictionary that contains named keys and recognizedHeader properties, and it returns
    // a result that has a signers array that has an element corresponding to each original signature if any
    // are matched by the multikey. (If none match, we return undefined.
    // Each element contains the kid, protectedHeader, possibly unprotectedHeader, and possibly payload (i.e. if successful).
    //
    // Additionally if a result is produced, the overall protectedHeader and unprotectedHeader contains only values
    // that were common to each of the verified signature elements.
    
    let jws = signature,
        kids = this.keyTags(key),
        signers = await Promise.all(jws.signatures.map(signature => this.verifySubSignature(jws, signature, key, kids)));
    if (!signers.find(signer => signer.payload)) return undefined;
    // Now canonicalize the signers and build up a result.
    let [first, ...rest] = signers,
        result = {protectedHeader: {}, unprotectedHeader: {}, signers},
        // For a header value to be common to verified results, it must be in the first result.
        getUnique = categoryName => {
          let firstHeader = first[categoryName],
              accumulatorHeader = result[categoryName];
          for (let label in firstHeader) {
            let value = firstHeader[label];
            if (rest.some(signerResult => signerResult[categoryName][label] !== value)) continue;
            accumulatorHeader[label] = value;
          }
        };
    getUnique('protectedHeader');
    getUnique('protectedHeader');
    // If anything verified, then set payload and allow text/json to be produced.
    // Callers can check signers[n].payload to determine if the result is what they want.
    result.payload = signers.find(signer => signer.payload).payload;
    return this.recoverDataFromContentType(result, options);
  }
};

Object.setPrototypeOf(MultiKrypto, Krypto); // Inherit from Krypto so that super.mumble() works.

class PersistedCollection {
  // Asynchronous local storage, available in web workers.
  constructor({collectionName = 'collection', dbName = 'asyncLocalStorage'} = {}) {
    // Capture the data here, but don't open the db until we need to.
    this.collectionName = collectionName;
    this.dbName = dbName;
    this.version = 1;
  }
  get db() { // Answer a promise for the database, creating it if needed.
    return this._db ??= new Promise(resolve => {
      const request = indexedDB.open(this.dbName, this.version);
      // createObjectStore can only be called from upgradeneeded, which is only called for new versions.
      request.onupgradeneeded = event => event.target.result.createObjectStore(this.collectionName);
      this.result(resolve, request);
    });
  }
  transaction(mode = 'read') { // Answer a promise for the named object store on a new transaction.
    const collectionName = this.collectionName;
    return this.db.then(db => db.transaction(collectionName, mode).objectStore(collectionName));
  }
  result(resolve, operation) {
    operation.onsuccess = event => resolve(event.target.result || ''); // Not undefined.
  }
  retrieve(tag) { // Promise to retrieve tag from collectionName.
    return new Promise(resolve => {
      this.transaction('readonly').then(store => this.result(resolve, store.get(tag)));
    });
  }
  store(tag, data) { // Promise to store data at tag in collectionName.
    return new Promise(resolve => {
      this.transaction('readwrite').then(store => this.result(resolve, store.put(data, tag)));
    });
  }
  remove(tag) { // Promise to remove tag from collectionName.
    return new Promise(resolve => {
      this.transaction('readwrite').then(store => this.result(resolve, store.delete(tag)));
    });
  }
}

function error(templateFunction, tag, cause = undefined) {
  // Formats tag (e.g., shortens it) and gives it to templateFunction(tag) to get
  // a suitable error message. Answers a rejected promise with that Error.
  let shortenedTag = tag.slice(0, 16) + "...",
      message = templateFunction(shortenedTag);
  return Promise.reject(new Error(message, {cause}));
}
function unavailable(tag) { // Do we want to distinguish between a tag being
  // unavailable at all, vs just the public encryption key being unavailable?
  // Right now we do not distinguish, and use this for both.
  return error(tag => `The tag ${tag} is not available.`, tag);
}

class KeySet {
  // A KeySet maintains two private keys: signingKey and decryptingKey.
  // See https://kilroy-code.github.io/distributed-security/docs/implementation.html#web-worker-and-iframe

  // Caching
  static keySets = {};
  static cached(tag) { // Return an already populated KeySet.
    return this.keySets[tag];
  }
  static clear(tag = null) { // Remove all KeySet instances or just the specified one, but does not destroy their storage.
    if (!tag) return KeySet.keySets = {};
    delete KeySet.keySets[tag];
  }
  constructor(tag) {
    this.tag = tag;
    this.memberTags = []; // Used when recursively destroying.
    KeySet.keySets[tag] = this; // Cache it.
  }

  // Principle operations.
  static async create(wrappingData) { // Create a persisted KeySet of the correct type, promising the newly created tag.
    let {time, ...keys} = await this.createKeys(wrappingData),
        {tag} = keys;
    await this.persist(tag, keys, wrappingData, time);
    return tag;
  }
  async destroy(options = {}) { // Terminates this keySet and associated storage, and same for OWNED recursiveMembers if asked.
    let {tag, memberTags, signingKey} = this,
        content = "", // Should storage have a separate operation to delete, other than storing empty?
        signature = await this.constructor.signForStorage({message: content, tag, memberTags, signingKey, time: Date.now()});
    await this.constructor.store('EncryptionKey', tag, signature);
    await this.constructor.store(this.constructor.collection, tag, signature);
    this.constructor.clear(tag);
    if (!options.recursiveMembers) return;
    await Promise.allSettled(this.memberTags.map(async memberTag => {
      let memberKeySet = await KeySet.ensure(memberTag);
      await memberKeySet.destroy(options);
    }));
  }
  decrypt(encrypted, options) { // Promise {payload, text, json} as appropriate.
    let {tag, decryptingKey} = this,
        key = encrypted.recipients ? {[tag]: decryptingKey} : decryptingKey;
    return MultiKrypto.decrypt(key, encrypted, options);
  }
  // sign as either compact or multiKey general JWS.
  // There's some complexity here around being able to pass in memberTags and signingKey when the keySet is
  // being created and doesn't yet exist.
  static async sign(message, {tags = [], team:iss, member:act, time:iat = iss && Date.now(),
                              memberTags, signingKey,
                              ...options}) {
    if (iss && !act) { // Supply the value
      if (!memberTags) memberTags = (await KeySet.ensure(iss)).memberTags;
      let cachedMember = memberTags.find(tag => this.cached(tag));
      act = cachedMember || await Promise.any(memberTags.map(tag => KeySet.ensure(tag))).then(keySet => keySet.tag);
    }
    if (iss && !tags.includes(iss)) tags = [iss, ...tags]; // Must be first
    if (act && !tags.includes(act)) tags = [...tags, act];

    let key = await this.produceKey(tags, async tag => {
      // Use specified signingKey (if any) for the first one.
      let key = signingKey || (await KeySet.ensure(tag)).signingKey;
      signingKey = null;
      return key;
    }, options);
    return MultiKrypto.sign(key, message, {iss, act, iat, ...options});
  }

  // Verify in the normal way, and then check deeply if asked.
  static async verify(signature, tags, options) {
    if (options.team && !tags.includes(options.team)) tags = [options.team, ...tags];
    let isCompact = !signature.signatures,
        key = await this.produceKey(tags, tag => KeySet.verifyingKey(tag), options, isCompact),
        result = await MultiKrypto.verify(key, signature, options),
        memberTag = options.member === undefined ? result?.protectedHeader.act : options.member,
        notBefore = options.notBefore;
    if (!result) return;
    if (memberTag) {
      if (options.member === 'team') {
        memberTag = result.protecteHeader.act;
        if (!memberTag) return;
      }
      if (!tags.includes(memberTag)) { // Add to tags and result if not already present
        let memberKey = await KeySet.verifyingKey(memberTag),
            memberMultikey = {[memberTag]: memberKey},
            aux = await MultiKrypto.verify(memberMultikey, signature, options);
        if (!aux) return;
        tags.push(memberTag);
        result.signers.find(signer => signer.protectedHeader.kid === memberTag).payload = result.payload;
      }
    }
    if (memberTag || notBefore === 'team') {
      let teamTag = result.protectedHeader.iss || result.protectedHeader.kid, // Multi or single case.
          verfiedJWS = await this.retrieve(TeamKeySet.collection, teamTag),
          jwe = verfiedJWS?.json;
      if (memberTag && !teamTag) return;
      if (memberTag && jwe && !jwe.recipients.find(member => member.header.kid === memberTag)) return;
      if (notBefore === 'team') notBefore = verfiedJWS?.protectedHeader.iat;
    }
    if (notBefore) {
      let {iat} = result.protectedHeader;
      if (iat < notBefore) return;
    }
    // Each signer should now be verified.
    if ((result.signers?.filter(signer => signer.payload).length || 1) !== tags.length) return;
    return result;
  }

  // Key management
  static async produceKey(tags, producer, options, useSingleKey = tags.length === 1) {
    // Promise a key or multiKey, as defined by producer(tag) for each key.
    if (useSingleKey) {
      let tag = tags[0];
      options.kid = tag;   // Bashes options in the single-key case, because multiKey's have their own.
      return producer(tag);
    }
    let key = {},
        keys = await Promise.all(tags.map(tag => producer(tag)));
    // This isn't done in one step, because we'd like (for debugging and unit tests) to maintain a predictable order.
    tags.forEach((tag, index) => key[tag] = keys[index]);
    return key;
  }
  // The corresponding public keys are available publically, outside the keySet.
  static verifyingKey(tag) { // Promise the ordinary singular public key corresponding to the signing key, directly from the tag without reference to storage.
    return MultiKrypto.importRaw(tag).catch(() => unavailable(tag));
  }
  static async encryptingKey(tag) { // Promise the ordinary singular public key corresponding to the decryption key, which depends on public storage.
    let exportedPublicKey = await this.retrieve('EncryptionKey', tag);
    if (!exportedPublicKey) return unavailable(tag);
    return await MultiKrypto.importJWK(exportedPublicKey.json);
  }
  static async createKeys(memberTags) { // Promise a new tag and private keys, and store the encrypting key.
    let {publicKey:verifyingKey, privateKey:signingKey} = await MultiKrypto.generateSigningKey(),
        {publicKey:encryptingKey, privateKey:decryptingKey} = await MultiKrypto.generateEncryptingKey(),
        tag = await MultiKrypto.exportRaw(verifyingKey),
        exportedEncryptingKey = await MultiKrypto.exportJWK(encryptingKey),
        time = Date.now(),
        signature = await this.signForStorage({message: exportedEncryptingKey, tag, signingKey, memberTags, time});
    await this.store('EncryptionKey', tag, signature);
    return {signingKey, decryptingKey, tag, time};
  }
  static getWrapped(tag) { // Promise the wrapped key appropriate for this class.
    return this.retrieve(this.collection, tag);
  }
  static async ensure(tag) { // Promise to resolve to a valid keySet, else reject.
    let keySet = this.cached(tag),
        stored = await DeviceKeySet.getWrapped(tag);
    if (stored) {
      keySet = new DeviceKeySet(tag);
    } else if ((stored = await TeamKeySet.getWrapped(tag))) {
      keySet = new TeamKeySet(tag);
    } else if ((stored = await RecoveryKeySet.getWrapped(tag))) {
      keySet = new RecoveryKeySet(tag);
    }
    // If things haven't changed, don't bother with setUnwrapped.
    if (keySet?.cached && keySet.cached === stored && keySet.decryptingKey && keySet.signingKey) return keySet;
    if (stored) keySet.cached = stored;
    else { // Not found. Could be a bogus tag, or one on another computer.
      this.clear(tag);
      return unavailable(tag);
    }
    return keySet.unwrap(keySet.cached).then(
      unwrapped => Object.assign(keySet, unwrapped),
      cause => {
        this.clear(keySet.tag);
        return error(tag => `You do not have access to the private key for ${tag}.`, keySet.tag, cause);
      });
  }
  static async persist(tag, keys, wrappingData, time = Date.now(), memberTags = wrappingData) { // Promise to wrap a set of keys for the wrappingData members, and persist by tag.
    let {signingKey} = keys,
        wrapped = await this.wrap(keys, wrappingData),
        signature = await this.signForStorage({message: wrapped, tag, signingKey, memberTags, time});
    await this.store(this.collection, tag, signature);
  }

  // Interactions with the cloud or local storage.
  static async store(collectionName, tag, signature) { // Store signature.
    if (collectionName === DeviceKeySet.collection) {
      // We called this. No need to verify here. But see retrieve().
      if (MultiKrypto.isEmptyJWSPayload(signature)) return LocalStore.remove(tag);
      return LocalStore.store(tag, signature);
    }
    return KeySet.Storage.store(collectionName, tag, signature);
  }
  static async retrieve(collectionName, tag) {  // Get back a verified result.
    let promise = (collectionName === DeviceKeySet.collection) ? LocalStore.retrieve(tag) : KeySet.Storage.retrieve(collectionName, tag),
        signature = await promise,
        key = signature && await KeySet.verifyingKey(tag);
    if (!signature) return;
    // While we rely on the Storage and LocalStore implementations to deeply check signatures during write,
    // here we still do a shallow verification check just to make sure that the data hasn't been messed with after write.
    if (signature.signatures) key = {[tag]: key}; // Prepare a multi-key
    return await MultiKrypto.verify(key, signature);
  }
}

class SecretKeySet extends KeySet { // Keys are encrypted based on a symmetric secret.
  static signForStorage({message, tag, signingKey, time}) {
    // Create a simple signature that does not specify iss or act.
    // There are no true memberTags to pass on and they are not used in simple signatures. However, the caller does
    // generically pass wrappingData as memberTags, and for RecoveryKeySets, wrappingData is the prompt. 
    // We don't store multiple times, so there's also no need for iat (which can be used to prevent replay attacks).
    return this.sign(message, {tags: [tag], signingKey, time});
  }
  static async wrap(keys, wrappingData = '') {
    if (wrappingData.includes(MultiKrypto.concatChar)) return Promise.reject("Cannot create recovery tag with a prompt that contains '~'.");
    let {decryptingKey, signingKey, tag} = keys,
  vaultKey = {decryptingKey, signingKey},

  wrappingKey = {[wrappingData]: await this.getSecret(tag, wrappingData)};
    return MultiKrypto.wrapKey(vaultKey, wrappingKey);
  }
  async unwrap(wrappedKey) {
    let parsed = wrappedKey.json,
  prompt = parsed.recipients[0].header.kid,
  secret = {[prompt]: await this.constructor.getSecret(this.tag, prompt)},
  exported = (await MultiKrypto.decrypt(secret, wrappedKey.json)).json;
    return await MultiKrypto.importJWK(exported, {decryptingKey: 'decrypt', signingKey: 'sign'});
  }
  static async getSecret(tag, prompt) {
    return KeySet.getUserDeviceSecret(tag, prompt);
  }
}

 // The user's answer(s) to a security question forms a secret, and the wrapped keys is stored in the cloude.
class RecoveryKeySet extends SecretKeySet {
  static collection = 'KeyRecovery';
}

// A KeySet corresponding to the current hardware. Wrapping secret comes from the app.
class DeviceKeySet extends SecretKeySet {
  static collection = 'Device';
}
const LocalStore = new PersistedCollection({collectionName: DeviceKeySet.collection});

class TeamKeySet extends KeySet { // A KeySet corresponding to a team of which the current user is a member (if getTag()).
  static collection = 'Team';
  static signForStorage({message, tag, ...options}) {
    return this.sign(message, {team: tag, ...options});
  }
  static async wrap(keys, members) {
    // This is used by persist, which in turn is used to create and changeMembership.
    let {decryptingKey, signingKey} = keys,
  teamKey = {decryptingKey, signingKey},
  wrappingKey = {};
    await Promise.all(members.map(memberTag => KeySet.encryptingKey(memberTag).then(key => wrappingKey[memberTag] = key)));
    let wrappedTeam = await MultiKrypto.wrapKey(teamKey, wrappingKey);
    return wrappedTeam;
  }
  async unwrap(wrapped) {
    let {recipients} = wrapped.json,
        memberTags = this.memberTags = recipients.map(recipient => recipient.header.kid),
        // We will use recovery tags only if we need to. First step is to identify them.
        // TODO: optimize this. E.g., determine recovery tags at creation and identify them in wrapped.
        recoveryWraps = await Promise.all(memberTags.map(tag => RecoveryKeySet.getWrapped(tag).catch(() => null))),
        recoveryTags = memberTags.filter((tag, index) => recoveryWraps[index]),
        nonRecoveryTags = memberTags.filter(tag => !recoveryTags.includes(tag));
    let keySet = await Promise.any(nonRecoveryTags.map(memberTag => KeySet.ensure(memberTag)))
        .catch(async reason => { // If we failed, use the recovery tags, if any, one at a time.
          for (let recovery of recoveryTags) {
            let keySet = await KeySet.ensure(recovery).catch(() => null);
            if (keySet) return keySet;
          }
          return reason;
        });
    let decrypted = await keySet.decrypt(wrapped.json);
    return await MultiKrypto.importJWK(decrypted.json);
  }
  async changeMembership({add = [], remove = []} = {}) {
    let {memberTags} = this,
	newMembers = memberTags.concat(add).filter(tag => !remove.includes(tag));
    await this.constructor.persist(this.tag, this, newMembers, Date.now(), memberTags);
    this.memberTags = newMembers;
  }
}

var name$1 = "@kilroy-code/distributed-security";
var version$1 = "0.0.3";
var description = "Signed and encrypted document infrastructure based on public key encryption and self-organizing users.";
var type = "module";
var exports = {
	node: "./lib/api.mjs",
	"default": "./index.mjs"
};
var imports = {
	"#raw": {
		node: "./lib/raw-node.mjs",
		"default": "./lib/raw-browser.mjs"
	},
	"#localStore": {
		node: "./lib/store-fs.mjs",
		"default": "./lib/store-indexed.mjs"
	},
	"#internals": {
		node: "./spec/support/internals.mjs",
		"default": "./spec/support/internal-browser-bundle.mjs"
	}
};
var scripts = {
	build: "rollup -c",
	test: "jasmine"
};
var repository = {
	type: "git",
	url: "git+https://github.com/kilroy-code/distributed-security.git"
};
var keywords = [
	"encryption",
	"pki",
	"dao"
];
var author = {
	name: "Howard Stearns",
	email: "howard@ki1r0y.com"
};
var license = "MIT";
var bugs = {
	url: "https://github.com/kilroy-code/distributed-security/issues"
};
var homepage = "https://github.com/kilroy-code/distributed-security#readme";
var devDependencies = {
	"@rollup/plugin-commonjs": "^25.0.7",
	"@rollup/plugin-eslint": "^9.0.5",
	"@rollup/plugin-node-resolve": "^15.2.3",
	"@rollup/plugin-terser": "^0.4.4",
	"@rollup/plugin-json": "^6.1.0",
	eslint: "^8.57.0",
	jasmine: "^4.5.0",
	"jsonc-eslint-parser": "^2.4.0",
	rollup: "^4.13.0"
};
var dependencies = {
	"@kilroy-code/jsonrpc": "^0.0.1",
	jose: "^5.2.3"
};
var _package = {
	name: name$1,
	version: version$1,
	description: description,
	type: type,
	exports: exports,
	imports: imports,
	scripts: scripts,
	repository: repository,
	keywords: keywords,
	author: author,
	license: license,
	bugs: bugs,
	homepage: homepage,
	devDependencies: devDependencies,
	dependencies: dependencies
};

// Because eslint doesn't recognize import assertions
const {name, version} = _package;

const Security = { // This is the api for the vault. See https://kilroy-code.github.io/distributed-security/docs/implementation.html#creating-the-vault-web-worker-and-iframe

  // Client-defined resources.
  set Storage(storage) {
    KeySet.Storage = storage;
  },
  set getUserDeviceSecret(thunk) {
    KeySet.getUserDeviceSecret = thunk;
  },
  ready: {name, version},

  // The four basic operations. ...rest may be one or more tags, or may be {tags, team, member, contentType, ...}
  async encrypt(message, ...rest) { // Promise a JWE.
    let options = {}, tags = this.canonicalizeParameters(rest, options),
        key = await KeySet.produceKey(tags, tag => KeySet.encryptingKey(tag), options);
    return MultiKrypto.encrypt(key, message, options);
  },
  async decrypt(encrypted, ...rest) { // Promise {payload, text, json} as appropriate.
    let options = {},
        [tag] = this.canonicalizeParameters(rest, options, encrypted),
        vault = await KeySet.ensure(tag);
    return vault.decrypt(encrypted, options);
  },
  async sign(message, ...rest) { // Promise a JWS.
    let options = {}, tags = this.canonicalizeParameters(rest, options);
    return KeySet.sign(message, {tags, ...options});
  },
  async verify(signature, ...rest) { // Promise {payload, text, json} as appropriate.
    let options = {}, tags = this.canonicalizeParameters(rest, options, signature);
    return KeySet.verify(signature, tags, options);
  },

  // Tag maintance.
  async create(...members) { // Promise a newly-created tag with the given members. The member tags (if any) must already exist.
    if (!members.length) return await DeviceKeySet.create([]);
    let prompt = members[0].prompt;
    if (prompt) return await RecoveryKeySet.create(prompt);
    return await TeamKeySet.create(members);
  },
  async changeMembership({tag, ...options}) { // Promise to add or remove members.
    let vault = await KeySet.ensure(tag);
    return vault.changeMembership(options);
  },
  async destroy(tagOrOptions) { // Promise to remove the tag and any associated data from all storage.
    if ('string' === typeof tagOrOptions) tagOrOptions = {tag: tagOrOptions};
    let {tag, ...options} = tagOrOptions;
    let vault = await KeySet.ensure(tag);
    return vault.destroy(options);
  },
  clear(tag) { // Remove any locally cached KeySet for the tag, or all KeySets if not tag specified.
    KeySet.clear(tag);
  },

  decodeProtectedHeader: MultiKrypto.decodeProtectedHeader,
  canonicalizeParameters(rest, options, token) { // Return the actual list of tags, and bash options.
    // rest may be a list of tag strings
    //    or a list of one single object specifying named parameters, including either team, tags, or neither
    // token may be a JWE or JSE, or falsy, and is used to supply tags if necessary.
    if (rest.length > 1) return rest;
    let {tags = [], contentType, time, ...others} = rest[0] || {},
	{team} = others; // Do not strip team from others.
    if (!tags.length) {
      if (rest.length && rest[0].length) tags = rest; // rest not empty, and its first is string-like.
      else if (token) { // get from token
        if (token.signatures) tags = token.signatures.map(sig => this.decodeProtectedHeader(sig).kid);
        else if (token.recipients) tags = token.recipients.map(rec => rec.header.kid);
        else {
          try {
            let kid = this.decodeProtectedHeader(token).kid; // compact token
            if (kid) tags = [kid];
          } catch (e) {
            console.error('failure with', {rest, token, team, tags, e});
          }
        }
      }
    }
    if (team && !tags.includes(team)) tags = [team, ...tags];
    if (contentType) options.cty = contentType;
    if (time) options.iat = time;
    Object.assign(options, others);

    return tags;
  }
};

// Setup.
//jasmine.getEnv().configure({random: false});
Storage.Security = api;
api.Storage = Storage;
let thisDeviceSecret = "secret",
    secret = thisDeviceSecret;
async function withSecret(thunk) {
  secret = "other";
  await thunk();
  secret = thisDeviceSecret;
}
function getSecret(tag, recoveryPrompt = '') {
  return recoveryPrompt + secret;
}
api.getUserDeviceSecret = getSecret;
Security.Storage = Storage;
Security.getUserDeviceSecret = getSecret;

if (typeof(window) !== 'undefined') Object.assign(window, {Security: api, Krypto, MultiKrypto});

describe('Distributed Security', function () {
  let message = makeMessage();
  describe('Krypto', function () {
    testKrypto(Krypto);
  });
  describe('MultiKrypto', function () {
    testMultiKrypto(MultiKrypto);
  });
  describe('Security', function () {
    const slowKeyCreation = 25e3; // e.g., Safari needs about 15 seconds. Android needs more
    async function makeKeySets(scope) { // Create a standard set of test vaults through context.
      let tags = {};
      let [device, recovery, otherRecovery] = await Promise.all([
        scope.create(),
        scope.create({prompt: "what?"}),
        scope.create({prompt: "nope!"})
      ]);
      let otherDevice, otherUser;
      await withSecret(async function () {
        otherDevice = await scope.create();
        otherUser = await scope.create(otherDevice);
      });
      let user = await scope.create(device);
      // // Note: same members, but a different identity.
      let [team, otherTeam] = await Promise.all([scope.create(user, otherUser), scope.create(otherUser, user)]);
      tags.device = device;
      tags.otherDevice = otherDevice;
      tags.recovery = recovery; tags.otherRecovery = otherRecovery;
      tags.user = user; tags.otherUser = otherUser;
      tags.team = team; tags.otherTeam = otherTeam;
      return tags;
    }
    async function destroyKeySets(scope, tags) {
      await scope.destroy(tags.otherTeam);
      await scope.destroy(tags.team);
      await scope.destroy(tags.user);
      await scope.destroy(tags.device);
      await scope.destroy(tags.recovery);
      await scope.destroy(tags.otherRecovery);
      await withSecret(async function () {
        await scope.destroy(tags.otherUser);
        await scope.destroy(tags.otherDevice);
      });
    }
    describe('internal machinery', function () {
      let tags;
      beforeAll(async function () {
        tags = await makeKeySets(Security);
      }, slowKeyCreation);
      afterAll(async function () {
        await destroyKeySets(Security, tags);
      }, slowKeyCreation);
      function vaultTests(label, tagsKey) {
        describe(label, function () { 
          let vault, tag;
          beforeAll(async function () {
            tag = tags[tagsKey];
            vault = await KeySet.ensure(tag);
          });
          it('tag is exported verify key, and sign() pairs with it.', async function () {
            let verifyKey = await MultiKrypto.importRaw(tag),
                exported = await MultiKrypto.exportRaw(verifyKey);
            expect(typeof tag).toBe('string');
            expect(exported).toBe(tag);

            let vault = await KeySet.ensure(tag);

            let signature = await KeySet.sign(message, {tags: [tag], signingKey: vault.signingKey}),
                verification = await MultiKrypto.verify(verifyKey, signature);
            isBase64URL(signature);
            expect(verification).toBeTruthy();
          });
          it('public encryption tag can be retrieved externally, and vault.decrypt() pairs with it.', async function () {
            let tag = vault.tag,
                retrieved = await Storage.retrieve('EncryptionKey', tag),
                verified = await api.verify(retrieved, tag),
                imported = await MultiKrypto.importJWK(verified.json),
                encrypted = await MultiKrypto.encrypt(imported, message),
                decrypted = await vault.decrypt(encrypted);
            expect(decrypted.text).toBe(message);
          });
        });
      }
      vaultTests('DeviceKeySet', 'device');
      vaultTests('RecoveryKeySet', 'recovery');
      vaultTests('TeamKeySet', 'user');
      describe('local store', function () {
        var store; 
        beforeAll(async function () {
          store = new PersistedCollection({dbName: 'testStore', collectionName: 'Foo'});
          await new Promise(resolve => setTimeout(resolve, 2e3)); // fixme remove
        });
        it('can remove without existing.', async function () {
          let tag = 'nonExistant';
          expect(await store.remove(tag)).toBe("");
        });
        it('can retrieve without existing.', async function () {
          let tag = 'nonExistant';
          expect(await store.retrieve(tag)).toBe("");
        });
        it('retrieves and can remove what is stored.', async function () {
          let tag = 'x', message = "hello";
          expect(await store.store(tag, message)).not.toBeUndefined();
          expect(await store.retrieve(tag)).toBe(message);
          expect(await store.remove(tag)).toBe("");
          expect(await store.retrieve(tag)).toBe("");
        });
        it('can write a lot without getting jumbled.', async function () {
          let count = 1000, prefix = "y", tags = [];
          for (let i = 0; i < count; i++) tags.push(prefix + i);
          let start, elapsed, per;

          start = Date.now();
          let stores = await Promise.all(tags.map((tag, index) => store.store(tag, index.toString())));
          elapsed = Date.now() - start; per = elapsed/count;
          //console.log({elapsed, per});
          expect(per).toBeLessThan(5);
          stores.forEach(storeResult => expect(storeResult).not.toBeUndefined());

          start = Date.now();
          let reads = await Promise.all(tags.map(tag => store.retrieve(tag)));
          elapsed = Date.now() - start; per = elapsed/count;
          //console.log({elapsed, per});
          expect(per).toBeLessThan(3);
          reads.forEach((readResult, index) => expect(readResult).toBe(index.toString()));

          start = Date.now();
          let removes = await Promise.all(tags.map(tag => store.remove(tag)));
          elapsed = Date.now() - start; per = elapsed/count;
          //console.log({elapsed, per});
          expect(per).toBeLessThan(5);
          removes.forEach(removeResult => expect(removeResult).toBe(""));

          start = Date.now();
          let rereads = await Promise.all(tags.map(tag => store.retrieve(tag)));
          elapsed = Date.now() - start; per = elapsed/count;
          //console.log({elapsed, per});
          expect(per).toBeLessThan(0.1);
          rereads.forEach(readResult => expect(readResult).toBe(""));
        }, 10e5);
      });
    });

    describe("API", function () {
      let tags;
      beforeAll(async function () {
        console.log(await api.ready);
        tags = await makeKeySets(api);
      }, slowKeyCreation);
      afterAll(async function () {
        await destroyKeySets(api, tags);
      }, slowKeyCreation);
      function test(label, tagsName, otherOwnedTagsName, unownedTagName) {
        describe(label, function () {
          let tag, otherOwnedTag;
          beforeAll(function () {
            tag = tags[tagsName];
            otherOwnedTag = tags[otherOwnedTagsName];
          });
          describe('signature', function () {
            describe('of one tag', function () {
              it('can sign and be verified.', async function () {
                let signature = await api.sign(message, tag);
                isBase64URL(signature);
                expect(await api.verify(signature, tag)).toBeTruthy();
              });
              it('can be verified with the tag included in the signature.', async function () {
                let signature = await api.sign(message, tag);
                expect(await api.verify(signature)).toBeTruthy();
              });
              it('cannot sign for a different key.', async function () {
                let signature = await api.sign(message, otherOwnedTag);
                expect(await api.verify(signature, tag)).toBeUndefined();
              });
              it('distinguishes between correctly signing false and key failure.', async function () {
                let signature = await api.sign(false, tag),
                    verified = await api.verify(signature, tag);
                expect(verified.json).toBe(false);
              });
              it('can sign text and produce verified result with text property.', async function () {
                let signature = await api.sign(message, tag),
                    verified = await api.verify(signature, tag);
                isBase64URL(signature);
                expect(verified.text).toBe(message);
              });
              it('can sign json and produce verified result with json property.', async function () {
                let message = {x: 1, y: ["abc", null, false]},
                    signature = await api.sign(message, tag),
                    verified = await api.verify(signature, tag);
                isBase64URL(signature);
                expect(verified.json).toEqual(message);
              });
              it('can sign binary and produce verified result with payload property.', async function () {
                let message = new Uint8Array([1, 2, 3]),
                    signature = await api.sign(message, tag),
                    verified = await api.verify(signature, tag);
                isBase64URL(signature);
                expect(verified.payload).toEqual(message);
              });
              it('uses contentType and time if supplied.', async function () {
                let contentType = 'text/html',
                    time = Date.now(),
                    message = "<something else>",
                    signature = await api.sign(message, {tags: [tag], contentType, time}),
                    verified = await api.verify(signature, tag);
                isBase64URL(signature);
                expect(verified.text).toEqual(message);
                expect(verified.protectedHeader.cty).toBe(contentType);
                expect(verified.protectedHeader.iat).toBe(time);
              });
            });
            describe('of multiple tags', function () {
              it('can sign and be verified.', async function () {
                let signature = await api.sign(message, tag, otherOwnedTag),
                    verification = await api.verify(signature, otherOwnedTag, tag);
                expect(verification).toBeTruthy(); // order does not matter
                expect(verification.signers[0].payload).toBeTruthy(); // All recipients listed in verify
                expect(verification.signers[1].payload).toBeTruthy();
              });
              it('does not attempt to verify unenumerated tags if any are explicit', async function () {
                let signature = await api.sign(message, tag, otherOwnedTag),
                    verification = await api.verify(signature, otherOwnedTag);
                expect(verification).toBeTruthy(); // order does not matter
                expect(verification.signers[0].payload).toBeFalsy(); // Because we explicitly verified with 1, not 0.
                expect(verification.signers[1].payload).toBeTruthy();
              });	      
              it('can be verified with the tag included in the signature.', async function () {
                let signature = await api.sign(message, tag, otherOwnedTag),
                    verification = await api.verify(signature);
                expect(verification).toBeTruthy();
                expect(verification.signers[0].payload).toBeTruthy(); // All are checked, and in this case, pass.
                expect(verification.signers[1].payload).toBeTruthy();
              });
              describe('bad verification', function () {
                let oneMore;
                beforeAll(async function () { oneMore = await api.create(); });
                afterAll(async function () { await api.destroy(oneMore); });
                describe('when mixing single and multi-tags', function () {
                  it('fails with extra signing tag.', async function () {
                    let signature = await api.sign(message, otherOwnedTag);
                    expect(await api.verify(signature, tag)).toBeUndefined();
                  });
                  it('fails with extra verifying.', async function () {
                    let signature = await api.sign(message, tag);
                    expect(await api.verify(signature, tag, otherOwnedTag)).toBeUndefined();
                  });
                });
                describe('when mixing multi-tag lengths', function () {
                  it('fails with mismatched signing tag.', async function () {
                    let signature = await api.sign(message, otherOwnedTag, oneMore),
                        verified = await api.verify(signature, tag, oneMore);
                    expect(verified).toBeUndefined();
                  });
                  it('fails with extra verifying tag.', async function () {
                    let signature = await api.sign(message, tag, oneMore);
                    expect(await api.verify(signature, tag, otherOwnedTag, oneMore)).toBeUndefined();
                  });
                });
              });
              it('distinguishes between correctly signing false and key failure.', async function () {
                let signature = await api.sign(false, tag, otherOwnedTag),
                    verified = await api.verify(signature, tag, otherOwnedTag);
                expect(verified.json).toBe(false);
              });
              it('can sign text and produce verified result with text property.', async function () {
                let signature = await api.sign(message, tag, otherOwnedTag),
                    verified = await api.verify(signature, tag, otherOwnedTag);
                expect(verified.text).toBe(message);
              });
              it('can sign json and produce verified result with json property.', async function () {
                let message = {x: 1, y: ["abc", null, false]},
                    signature = await api.sign(message, tag, otherOwnedTag),
                    verified = await api.verify(signature, tag, otherOwnedTag);
                expect(verified.json).toEqual(message);
              });
              it('can sign binary and produce verified result with payload property.', async function () {
                let message = new Uint8Array([1, 2, 3]),
                    signature = await api.sign(message, tag, otherOwnedTag),
                    verified = await api.verify(signature, tag, otherOwnedTag);
                expect(verified.payload).toEqual(message);
              });
              it('uses contentType and time if supplied.', async function () {
                let contentType = 'text/html',
                    time = Date.now(),
                    message = "<something else>",
                    signature = await api.sign(message, {tags: [tag, otherOwnedTag], contentType, time}),
                    verified = await api.verify(signature, tag, otherOwnedTag);
                expect(verified.text).toEqual(message);
                expect(verified.protectedHeader.cty).toBe(contentType);
                expect(verified.protectedHeader.iat).toBe(time);
              });
            });
          });
          describe('encryption', function () {
            describe('with a single tag', function () {
              it('can decrypt what is encrypted for it.', async function () {
                let encrypted = await api.encrypt(message, tag),
                    decrypted = await api.decrypt(encrypted, tag);
                isBase64URL(encrypted);
                expect(decrypted.text).toBe(message);
              });
              it('can be decrypted using the tag included in the encryption.', async function () {
                let encrypted = await api.encrypt(message, tag),
                    decrypted = await api.decrypt(encrypted);
                expect(decrypted.text).toBe(message);
              });
              it('is url-safe base64.', async function () {
                isBase64URL(await api.encrypt(message, tag));
              });
              it('specifies kid.', async function () {
                let header = Krypto.decodeProtectedHeader(await api.encrypt(message, tag));
                expect(header.kid).toBe(tag);
              });
              it('cannot decrypt what is encrypted for a different key.', async function () {
                let message = makeMessage(446),
                    encrypted = await api.encrypt(message, otherOwnedTag),
                    errorMessage = await api.decrypt(encrypted, tag).catch(e => e.message);
                expect(errorMessage.toLowerCase()).toContain('operation');
                // Some browsers supply a generic message, such as 'The operation failed for an operation-specific reason'
                // IF there's no message at all, our jsonrpc supplies one with the jsonrpc 'method' name.
                //expect(errorMessage).toContain('decrypt');
              });
              it('handles binary, and decrypts as same.', async function () {
                let message = new Uint8Array([21, 31]),
                    encrypted = await api.encrypt(message, tag),
                    decrypted = await api.decrypt(encrypted, tag),
                    header = Krypto.decodeProtectedHeader(encrypted);
                expect(header.cty).toBeUndefined();
                sameTypedArray(decrypted, message);
              });
              it('handles text, and decrypts as same.', async function () {
                let encrypted = await api.encrypt(message, tag),
                    decrypted = await api.decrypt(encrypted, tag),
                    header = Krypto.decodeProtectedHeader(encrypted);
                expect(header.cty).toBe('text/plain');
                expect(decrypted.text).toBe(message);
              });
              it('handles json, and decrypts as same.', async function () {
                let message = {foo: 'bar'},
                    encrypted = await api.encrypt(message, tag),
                    decrypted = await api.decrypt(encrypted, tag),
                    header = Krypto.decodeProtectedHeader(encrypted);
                expect(header.cty).toBe('json');
                expect(decrypted.json).toEqual(message);
              });
              it('uses contentType and time if supplied.', async function () {
                let contentType = 'text/html',
                    time = Date.now(),
                    message = "<something else>",
                    encrypted = await api.encrypt(message, {tags: [tag], contentType, time}),
                    decrypted = await api.decrypt(encrypted, tag),
                    header = Krypto.decodeProtectedHeader(encrypted);
                expect(header.cty).toBe(contentType);
                expect(header.iat).toBe(time);
                expect(decrypted.text).toBe(message);
              });
            });
            describe('with multiple tags', function () {
              it('can be decrypted by any one of them.', async function () {
                let encrypted = await api.encrypt(message, tag, otherOwnedTag),
                    decrypted1 = await api.decrypt(encrypted, tag),
                    decrypted2 = await api.decrypt(encrypted, otherOwnedTag);
                expect(decrypted1.text).toBe(message);
                expect(decrypted2.text).toBe(message);        
              });
              it('can be decrypted using the tag included in the encryption.', async function () {
                let encrypted = await api.encrypt(message, tag, otherOwnedTag),
                    decrypted = await api.decrypt(encrypted);
                expect(decrypted.text).toBe(message);
              });
              it('can be be made with tags you do not own.', async function () {
                let encrypted = await api.encrypt(message, tag, tags[unownedTagName], otherOwnedTag),
                    decrypted1 = await api.decrypt(encrypted, tag),
                    decrypted2 = await api.decrypt(encrypted, otherOwnedTag);
                expect(decrypted1.text).toBe(message);
                expect(decrypted2.text).toBe(message);        
              });
              it('cannot be decrypted by a different tag.', async function () {
                let encrypted = await api.encrypt(message, tag, tags[unownedTagName]),
                    decrypted = await api.decrypt(encrypted, otherOwnedTag);
                expect(decrypted).toBeUndefined();
              });
              it('specifies kid in each recipient.', async function () {
                let encrypted = await api.encrypt(message, tag, otherOwnedTag),
                    recipients = encrypted.recipients;
                expect(recipients.length).toBe(2);
                expect(recipients[0].header.kid).toBe(tag);
                expect(recipients[1].header.kid).toBe(otherOwnedTag);
              });

              it('handles binary, and decrypts as same.', async function () {
                let message = new Uint8Array([21, 31]),
                    encrypted = await api.encrypt(message, tag, otherOwnedTag),
                    decrypted = await api.decrypt(encrypted, tag),
                    header = Krypto.decodeProtectedHeader(encrypted);
                expect(header.cty).toBeUndefined();
                sameTypedArray(decrypted, message);
              });
              it('handles text, and decrypts as same.', async function () {
                let encrypted = await api.encrypt(message, tag, otherOwnedTag),
                    decrypted = await api.decrypt(encrypted, tag),
                    header = Krypto.decodeProtectedHeader(encrypted);
                expect(header.cty).toBe('text/plain');
                expect(decrypted.text).toBe(message);
              });
              it('handles json, and decrypts as same.', async function () {
                let message = {foo: 'bar'},
                    encrypted = await api.encrypt(message, tag, otherOwnedTag),
                    decrypted = await api.decrypt(encrypted, tag),
                    header = Krypto.decodeProtectedHeader(encrypted);
                expect(header.cty).toBe('json');
                expect(decrypted.json).toEqual(message);
              });
              it('uses contentType and time if supplied.', async function () {
                let contentType = 'text/html',
                    time = Date.now(),
                    message = "<something else>",
                    encrypted = await api.encrypt(message, {tags: [tag, otherOwnedTag], contentType, time}),
                    decrypted = await api.decrypt(encrypted, tag),
                    header = Krypto.decodeProtectedHeader(encrypted);
                expect(header.cty).toBe(contentType);
                expect(header.iat).toBe(time);
                expect(decrypted.text).toBe(message);
              });
            });
          });
        });
      }
      test('DeviceKeySet', 'device', 'user', 'otherDevice'); // We own user, but it isn't the same as device.
      test('RecoveryKeySet', 'recovery', 'otherRecovery', 'otherDevice');
      test('User TeamKeySet', 'user', 'device', 'otherUser'); // We ownd device, but it isn't the same as user.
      test('Team TeamKeySet', 'team', 'otherTeam', 'otherUser');
      describe('auditable signatures', function () {
        describe('by an explicit member', function () {
          let signature, verification;
          beforeAll(async function () {
            signature = await api.sign(message, {team: tags.team, member: tags.user});
            verification = await api.verify(signature, tags.team, tags.user);
          });
          it('recognizes a team with a member.', async function () {
            expect(verification).toBeTruthy();
            expect(verification.text).toBe(message);
          });
          it('defines iss.', function () {
            expect(verification.protectedHeader.iss).toBe(tags.team);
          });
          it('defines act.', function () {
            expect(verification.protectedHeader.act).toBe(tags.user);
          });
        });
        describe('automatically supplies a valid member', function () {
          it('if you have access', async function () {
            let signature = await api.sign(message, {team: tags.team}),
                member = Krypto.decodeProtectedHeader(signature.signatures[0]).act,
                verification = await api.verify(signature, tags.team, member);
            expect(verification).toBeTruthy();
            expect(member).toBeTruthy();
            expect(verification.protectedHeader.act).toBe(member);
            expect(verification.protectedHeader.iat).toBeTruthy();
          });
        });
        describe('with a valid user who is not a member', function () {
          let nonMember;
          beforeAll(async function () { nonMember = await api.create(tags.device); });
          afterAll(async function () { await api.destroy(nonMember); });
          it('verifies as an ordinary dual signature.', async function () {
            let signature = await api.sign(message, tags.team, nonMember),
                verification = await api.verify(signature, tags.team, nonMember);
            expect(verification.text).toBe(message);
            expect(verification.protectedHeader.iss).toBeUndefined();
            expect(verification.protectedHeader.act).toBeUndefined();
          }, 10e3);
          it('does not verify as a dual signature specifying team and member.', async function () {
            let signature = await api.sign(message, {team: tags.team, member: nonMember}),
                verification = await api.verify(signature, tags.team, nonMember);
            expect(verification).toBeUndefined();
          });
        });
        describe('with a past member', function () {
          let member, signature, time;
          beforeAll(async function () {
            time = Date.now() - 1;
            member = await api.create();
            await api.changeMembership({tag: tags.team, add: [member]});
            signature = await api.sign("message", {team: tags.team, member, time}); // while member
            await api.changeMembership({tag: tags.team, remove: [member]});
          });
          afterAll(async function () {
            await api.destroy(member);
          });
          it('fails by default.', async function () {
            let verified = await api.verify(signature, member);
            expect(verified).toBeUndefined();
          });
          it('contains act in signature but verifies if we tell it not to check membership.', async function () {
            let verified = await api.verify(signature, {team: tags.team, member: false});
            expect(verified).toBeTruthy();
            expect(verified.text).toBe("message");
            expect(verified.protectedHeader.act).toBe(member);
            expect(verified.protectedHeader.iat).toBeTruthy();
          });
          it('fails if we tell it to check notBefore:"team", even if we tell it not to check membership.', async function () {
            let verified = await api.verify(signature, {team: tags.team, member: false, notBefore:'team'});
            expect(verified).toBeUndefined();
          });
        });
      });
      it('can safely be used when a device is removed, but not after being entirely destroyed.', async function () {
        let [d1, d2] = await Promise.all([api.create(), api.create()]),
            u = await api.create(d1, d2),
            t = await api.create(u);

        let encrypted = await api.encrypt(message, t),
            decrypted = await api.decrypt(encrypted, t);
        expect(decrypted.text).toBe(message);
        // Remove the first deep member
        decrypted = await api.decrypt(encrypted, t);
        await api.changeMembership({tag: u, remove: [d1]});
        expect(decrypted.text).toBe(message);
        // Put it back.
        await api.changeMembership({tag: u, add: [d1]});
        decrypted = await api.decrypt(encrypted, t);
        expect(decrypted.text).toBe(message);
        // Make the other unavailable
        await api.destroy(d2);
        decrypted = await api.decrypt(encrypted, t);
        expect(decrypted.text).toBe(message);
        // Destroy it all the way down.
        await api.destroy({tag: t, recursiveMembers: true});
        let errorMessage = await api.decrypt(encrypted, t).then(() => null, e => e.message);
        expect(errorMessage).toBeTruthy();
      }, slowKeyCreation);
      it('device is useable as soon as it resolves.', async function () {
        let device = await api.create();
        expect(await api.sign("anything", device)).toBeTruthy();
        await api.destroy(device);
      }, 10e3);
      it('team is useable as soon as it resolves.', async function () {
        let team = await api.create(tags.device); // There was a bug once: awaiting a function that did return its promise.
        expect(await api.sign("anything", team)).toBeTruthy();
        await api.destroy(team);
      });
      it('allows recovery prompts that contain dot.', async function () {
        let recovery = await api.create({prompt: "foo.bar"}),
            user = await api.create(recovery),
            message = "red.white",
            encrypted = await api.encrypt(message, user),
            decrypted = await api.decrypt(encrypted, user),
            signed = await api.sign(message, user);
        expect(decrypted.text).toBe(message);
        expect(await api.verify(signed, user)).toBeTruthy();
        await api.destroy({tag: user, recursiveMembers: true});
      }, 10e3);
      it('supports rotation.', async function () {
        let aliceTag = await api.create(tags.device),
            cfoTag = await api.create(aliceTag),
            alicePO = await api.sign("some purchase order", {team: cfoTag, member: aliceTag}), // On Alice's computer
            cfoEyesOnly = await api.encrypt("the other set of books", cfoTag);
        expect(await api.verify(alicePO)).toBeTruthy();
        expect(await api.verify(alicePO, {team: cfoTag, member: false})).toBeTruthy();
        expect(await api.decrypt(cfoEyesOnly)).toBeTruthy(); // On Alice's computer

        // Now Alice is replace with Bob, and Carol added for the transition
        let bobTag = await api.create(tags.device);
        let carolTag = await api.create(tags.device);
        await api.changeMembership({tag: cfoTag, remove: [aliceTag], add: [bobTag, carolTag]});
        await api.destroy(aliceTag);

        expect(await api.sign("bogus PO", {team: cfoTag, member: aliceTag}).catch(() => undefined)).toBeUndefined(); // Alice can no longer sign.
        let bobPO = await api.sign("new PO", {team: cfoTag, member: bobTag}); // On Bob's computer
        let carolPO = await api.sign("new PO", {team: cfoTag, member: carolTag});
        expect(await api.verify(bobPO)).toBeTruthy();
        expect(await api.verify(carolPO)).toBeTruthy();
        expect(await api.verify(alicePO).catch(() => undefined)).toBeUndefined(); // Alice is no longer a member of cfoTag.
        expect(await api.verify(alicePO, {team: cfoTag, member: false})).toBeTruthy(); // Destorying Alice's tag doesn't prevent shallow verify
        expect(await api.decrypt(cfoEyesOnly)).toBeTruthy(); // On Bob's or Carol's computer

        // Now suppose we want to rotate the cfoTag:
        let cfoTag2 = await api.create(bobTag); // Not Carol.
        await api.destroy(cfoTag);

        expect(await api.sign("bogus PO", {team: cfoTag, member: bobTag}).catch(() => undefined)).toBeUndefined(); // Fails for discontinued team.
        expect(await api.sign("new new PO", {team: cfoTag2, member: bobTag})).toBeTruthy();
        expect(await api.verify(alicePO, {team: cfoTag, member: false})).toBeTruthy();
        // However, some things to be aware of.
        expect(await api.verify(bobPO)).toBeTruthy(); // works, but only because this looks like the initial check
        expect(await api.verify(carolPO)).toBeTruthy(); // same, and confusing because Carol is not on the new team.
        expect(await api.decrypt(cfoEyesOnly).catch(() => undefined)).toBeUndefined(); // FAILS! Bob can't sort through the mess that Alice made.
      }, 15e3);
      // TODO:
      // - Show that a member cannot sign or decrypt for a team that they have been removed from.
      // - Show that multiple simultaneous apps can use the same tags if they use Security from the same origin and have compatible getUserDeviceSecret.
      // - Show that multiple simultaneous apps cannot use the same tags if they use Security from the same origin and have incompatible getUserDeviceSecret.
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
